#+TITLE: ./configure && make && make install

Make. ~gerbil~ needs ~./configure; make; make install~ that folks use. In
particular it makes packaging easier. So, here we go!

* ./configure
  :PROPERTIES:
  :CUSTOM_ID: configure
  :END:

In the end there are generations of scripts that we need to give birth to. Once
that is done, we generate a ~./configure~ which generates a ~Makefile~.

We do that using ~./doc/generate-configure-and-make.sh~

#+begin_src shell
./configure.sh
# [ ... ]

# Tangled 5 code blocks from configure.org
# Replacing PACKAGE_VERSION and PACKAGE_TARNAME using
# v0.16.0-1snapshot-DEV-20-g8c99110-1-gc8ea7a1
# Generated ./configure

#+end_src

* Autoconf: ~configure.ac~

Beyond ~--enable/disable-FOO~ for libraries, when building and running, both for
information and packages purposes, the ~PACKAGE_VERSION~ may need messing with.

 #+BEGIN_SRC autoconf :noweb-ref configure.ac
AC_INIT(Gerbil,v0.16,vyzo at hackzen.org,gerbil-v0_16)
PACKAGE_SHORTNAME="gerbil"

if test -d ./.git && test "$PACKAGE_VERSION" = "v0.16" ; then
PACKAGE_VERSION=$(git describe --tags)
fi

PACKAGE_STRING="Gerbil $PACKAGE_VERSION"

AC_SUBST(PACKAGE_SHORTNAME)
AC_SUBST(PACKAGE_NAME)
AC_SUBST(PACKAGE_VERSION)
AC_SUBST(PACKAGE_STRING)
AC_SUBST(PACKAGE_BUGREPORT)
AC_SUBST(PACKAGE_TARNAME)

AC_COPYRIGHT([[Copyright (c) 2020 by drewc <me@drewc.ca>, All Rights Reserved.]])

 #+END_SRC
** ~@gerbil_make_conf@~, configure at make time

In ~src/configure~ the buidling of libraries is configured. We'll use
~gerbil_make_conf~ as the variable and call configure in the makefile.

#+begin_src autoconf :noweb-ref gerbil_make_conf
AC_SUBST(gerbil_make_conf, "")
#+end_src

** ~--with-gambit=DIR~, set a default gambit location

*Gerbil* needs a *Gambit* compiler and interpreter in order to run.

Though it looks in ~$PATH~, it may not be there. So, by default, we can provide
the location while compiling that it will look at runtime.

#+begin_src autoconf :noweb-ref with-gambit
AC_ARG_WITH([gambit],
            [AS_HELP_STRING([--with-gambit=DIR],
              [Set default location of Gambit])],
            [],
            [with_gambit=no])
if test "x$with_gambit" != xno ; then
 gerbil_make_conf="$gerbil_make_conf --with-gambit=\"${with_gambit}\""
fi

#+end_src

** ~--enable-[zlib, lmdb, leveldb, mysql, ...]~

Here are the file components. We have ~--enable*~ and --~disable-*~ for a tonne.

"If a software package has optional compile-time features, the user can give
configure command line options to specify whether to compile them. The options
have one of these forms:

   --enable-feature[=arg]
   --disable-feature" --[[https://www.gnu.org/software/autoconf/manual/autoconf.html#Package-Options][autoconf manual]]

~â€” Macro: AC_ARG_ENABLE (feature, help-string, [action-if-given], [action-if-not-given])~

#+BEGIN_SRC autoconf :noweb-ref configure-libs
# Libxml
AC_ARG_ENABLE(libxml,
AS_HELP_STRING([--enable-libxml], [build std/xml libraries - requires libxml2 (default is NO)]),
ENABLE_LIBXML=$enableval,
ENABLE_LIBXML=no)

if test "$ENABLE_LIBXML" = yes; then
gerbil_make_conf="$gerbil_make_conf --enable-libxml"
LIBS="$LIBS -lxml2"
else
gerbil_make_conf="$gerbil_make_conf --disable-libxml"
fi
# Libyaml
AC_ARG_ENABLE(libyaml,
AS_HELP_STRING([--enable-libyaml], [build std/text/yaml libraries - requires libyaml (default is NO)]),
ENABLE_LIBYAML=$enableval,
ENABLE_LIBYAML=no)

if test "$ENABLE_LIBYAML" = yes; then
LIBS="$LIBS -lyaml"
gerbil_make_conf="$gerbil_make_conf --enable-libyaml"
else
gerbil_make_conf="$gerbil_make_conf --disable-libyaml"
fi

# Zlib
AC_ARG_ENABLE(zlib,
AS_HELP_STRING([--disable-zlib], [build std/text/zlib libraries - requires zlib (default is --enable-zlib]),
ENABLE_ZLIB=$enableval,
ENABLE_ZLIB=no)

if test "$ENABLE_ZLIB" = yes; then
gerbil_make_conf="$gerbil_make_conf --enable-zlib"
LIBS="$LIBS -lz"
else
gerbil_make_conf="$gerbil_make_conf --disable-zlib"
fi

# Sqlite
AC_ARG_ENABLE(sqlite,
AS_HELP_STRING([--disable-sqlite], [build std/db/sqlite libraries - requires sqlite3 (default is --enable-sqlite)]),
ENABLE_SQLITE=$enableval,
ENABLE_SQLITE=yes)
if test "$ENABLE_SQLITE" = yes; then
gerbil_make_conf="$gerbil_make_conf --enable-sqlite"
else
gerbil_make_conf="$gerbil_make_conf --disable-sqlite"
fi

# Mysql
AC_ARG_ENABLE(mysql,
AS_HELP_STRING([--enable-mysql], [build std/db/mysql libraries - requires mysql (default is NO)]),
ENABLE_MYSQL=$enableval,
ENABLE_MYSQL=no)

if test "$ENABLE_MYSQL" = yes; then
gerbil_make_conf="$gerbil_make_conf --enable-mysql"
else
gerbil_make_conf="$gerbil_make_conf --disable-mysql"
fi

# Lmdb
AC_ARG_ENABLE(lmdb,
AS_HELP_STRING([--enable-lmdb], [build std/db/lmdb libraries - requires lmdb2 (default is NO)]),
ENABLE_LMDB=$enableval,
ENABLE_LMDB=no)

if test "$ENABLE_LMDB" = yes; then
gerbil_make_conf="$gerbil_make_conf --enable-lmdb"
LIBS="$LIBS -llmdb"
else
gerbil_make_conf="$gerbil_make_conf --disable-lmdb"
fi

# Leveldb
AC_ARG_ENABLE(leveldb,
AS_HELP_STRING([--enable-leveldb], [build std/db/leveldb libraries - requires leveldb2 (default is NO)]),
ENABLE_LEVELDB=$enableval,
ENABLE_LEVELDB=no)

if test "$ENABLE_LEVELDB" = yes; then
gerbil_make_conf="$gerbil_make_conf --enable-leveldb"
LIBS="$LIBS -lleveldb"
else
gerbil_make_conf="$gerbil_make_conf --disable-leveldb"
fi

#+END_SRC

** /file/ configure.ac

#+BEGIN_SRC autoconf :noweb yes :tangle ../configure.ac
# Configure template for Gerbil system.
# Tangled using Org Mode (C-c C-v t) from configure.org
# $ tangle() {
#    emacs --batch -l org --eval "(org-babel-tangle-file \"$1\")"
# }
# $ tangle configure.org

# Copyright (c) 2019 by drewc <me@drewc.ca>, All Rights Reserved.

# Process this file with autoconf to produce a configure script.

<<configure.ac>>

<<gerbil_make_conf>>

<<with-gambit>>

<<configure-libs>>

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
#+END_SRC


* Makefile.in

We want a Makefile. The way this has worked over the last half-century or so is
that we write scripts on scripts on scripts. This is no exception.

** `make configure`

#+begin_src makefile :noweb-ref make-configure
configure: ensure-gx-version
	cd src && ./configure $(gerbil_make_conf) --prefix=$(gerbil_home)
#+end_src

** Version file: ./src/gerbil/runtime/gx-version.scm

Essentially, that file only exists for releases. For "snapshots", that is to say
building master and the like, that file does not exist and is generated from a
git tag.

That's all fine and dandy, but a source tarball does not include the .git/,
which means it fails when trying to build a distribution package that expects to
be built from an upstream tarball and diffs.

As luck from programming gods would have it, we have ~PACKAGE_STRING~ in our
configure.

#+name: ensure-gx-version
#+begin_src makefile
ensure-gx-version:
	echo "(define (gerbil-version-string) \"$(PACKAGE_STRING)\")" \
	> ./src/gerbil/runtime/gx-version.scm ;
#+end_src

** /file/ Makefile.in

#+BEGIN_SRC makefile :noweb yes :tangle ../Makefile.in
# Makefile Template for Gerbil
# Tangled using Org Mode (C-c C-v t) from doc/configure.org
# $ tangle() {
#    emacs --batch -l org --eval "(org-babel-tangle-file \"$1\")"
# }
# $ tangle doc/configure.org

# Copyright (c) 2019 by drewc <me@drewc.ca>, All Rights Reserved.

# The Makefile is generated by running ./configure

PACKAGE_SHORTNAME = @PACKAGE_SHORTNAME@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_TARNAME = @PACKAGE_TARNAME@

prefix = @prefix@
exec_prefix = @exec_prefix@
includedir = @includedir@
libdir = @libdir@
bindir = @bindir@
docdir = @docdir@
infodir = @infodir@
emacsdir = @emacsdir@
libexecdir = @libexecdir@
datarootdir = @datarootdir@
datadir = @datadir@
htmldir = @htmldir@
dvidir = @dvidir@
pdfdir = @pdfdir@
psdir = @psdir@
localedir = @localedir@
mandir = @mandir@

LIBS = @LIBS@

gerbil_home = "${prefix}/lib/${PACKAGE_SHORTNAME}"
gerbil_bin = "${gerbil_home}/bin"
gerbil_lib = "${gerbil_home}/lib"
gerbil_bin_linkdir = "${prefix}/bin"

gerbil_make_conf = @gerbil_make_conf@

gerbil: configure
	echo "LIBXML:" $(foo)
	cd src && LDFLAGS="$(LIBS)" ./build.sh

<<ensure-gx-version>>

<<make-configure>>

stdlib:
	cd src && LDFLAGS="$(LIBS)" ./build.sh stdlib

lang:
	cd src && LDFLAGS="$(LIBS)" ./build.sh lang


r7rs-large:
	cd src && LDFLAGS="$(LIBS)" ./build.sh r7rs-large

tools:
	cd src && LDFLAGS="$(LIBS)" ./build.sh tools

stage0:
	cd src && LDFLAGS="$(LIBS)" ./build.sh stage0

stage1:
	cd src && LDFLAGS="$(LIBS)" ./build.sh stage1

layout:
	cd src && LDFLAGS="$(LIBS)" ./build.sh layout

tags:
	cd src && LDFLAGS="$(LIBS)" ./build.sh tags

install:
# Symlinks
	mkdir -p ${gerbil_bin} ;
	mkdir -p ${gerbil_lib} ;
	cp -a bin/* ${gerbil_bin} ;
	cp -a lib/* ${gerbil_lib} ;
	@for i in `find ${gerbil_bin} -type f` ; do \
	  _name=`basename $$i`;\
    _link="${gerbil_bin_linkdir}/$$_name" ; \
	  mkdir -p "${gerbil_bin_linkdir}"; \
	  if test -f $$_link ; then rm "$$_link" ; fi ;\
    echo "Linking $$_link to $$i"; \
	  ln -sr $$i "$$_link" ; \
	done ;


uninstall:
# Symlinks
	@for i in `find ${gerbil_bin} -type f` ; do \
	  _name=`basename $$i`;\
	  _link="${gerbil_bin_linkdir}/$$_name" ; \
	  if test -L $$_link && test $$(dirname `readlink $$_link`) = ${gerbil_bin}; then \
	     echo removing "$$_link" ; rm "$$_link" ; elif test -f "$$_link" ; then echo $$_link is not a link to $$i. Not removing. ; fi ; \
	done ;

	rm -rf ${gerbil_home};

test:
	echo $(LIBS) ;

#+END_SRC


* /File/ generate-configure-and-make.sh

#+BEGIN_SRC shell :tangle "generate-configure-and-make.sh" :shebang "#!/usr/bin/env bash"
_dir=$(cd -P -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)

GERBIL_SOURCE="$_dir/../"


tangle() {
   emacs -Q --batch --eval "(require 'org)" --eval "(org-babel-tangle-file \"$1\")"
}

# Once all that is done, run autoconf.
cd $GERBIL_SOURCE && tangle ./doc/configure-and-make.org && echo "HERE?" `pwd` && autoconf && \
    echo Generated ./configure and ./Makefile,in ? `ls configure Makefile.in`
#+END_SRC



* Legalese
  :PROPERTIES:
  :COPYING: t
  :END:

  Copyright Â© Drew Crampsie <me@drewc.ca>, All Right Reserved.

# Local Variables:
# org-src-tab-acts-natively: t
# org-src-preserve-indentation: t
# End:
