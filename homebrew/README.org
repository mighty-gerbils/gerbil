#+TITLE: Homebrew : Fetch us a pint o' Gerbil!
#+OPTIONS: tags:nil toc:nil
#+EXPORT_FILE_NAME: ../doc/guide/macos.md

* Gerbil on MacOS

To install gerbil on MacOS the easy way is simply to download the
homebrew =.rb= and run it as such.

#+begin_src sh
wget https://raw.githubusercontent.com/mighty-gerbils/gerbil/master/homebrew/gerbil-scheme.rb
brew install --formula -vd gerbil-scheme.rb
#+end_src

The run the bleeding edge master build simply pass the =--HEAD= argument.

#+begin_src sh
brew install --HEAD --formula -vd gerbil-scheme.rb
#+end_src

When updating/upgrading or hacking it's often needed to clear things.

#+begin_src sh
  brew unlink gerbil-scheme
  # Clear the build cache. Helps with subtrees and versions
  rm -rf $(brew --cache)/gerbil-scheme--git
#+end_src

And, if worse comes to worse, uninstall and delete the rest.

#+begin_src sh
brew uninstall gerbil-scheme
rm -rf ~/.gerbil
#+end_src

* Documentation

#+begin_export md
<!---
  The markdown file "macos.md" is weaved (AKA generated) from the homebrew/README.org file.
 -->
#+end_export

Gerbil is fully available for MacOS! There are some differences that
need to be taken into account should you wish to compile and
distribute a binary but it should JustWork(tm) all things considered.

** =DYLD_LIBRARY_PATH= and stripping: System Integrity Protection (SIP)

Ah stripping. Whether you love it or hate it, it happens, often witout
a say. System Integrity Protection (SIP) in macOS protects the entire
system by preventing the execution of unauthorized code.

In short the mantra is "Don't Shell Out!". The environment is propagated when just calling =gxi=.

#+begin_src sh
% gxi -e '(displayln (getenv "DYLD_LIBRARY_PATH" #f))'
/opt/homebrew/Cellar/gerbil-scheme/17.9/v0.17.0-314-ga7358fcb/lib/
#+end_src

It may not propagate with a shebang or other reasons. It seems
arbitrary. For example I updated my older iMac to an unsupported
Ventura. It does not strip for me.

#+begin_src sh
$ uname -a
Darwin drewc-iMac.local 22.6.0 Darwin Kernel Version 22.6.0: Tue Aug 15 20:13:24 PDT 2023; root:xnu-8796.141.3.700.5~2/RELEASE_X86_64 x86_64
$ export MY_LIBRARY_PATH=$(gxi -e '(display (path-expand "~~lib"))' -e '(flush-output-port)')
$ LD_LIBRARY_PATH=${MY_LIBRARY_PATH}
$ DYLD_LIBRARY_PATH=${MY_LIBRARY_PATH}
$ echo '#!/bin/sh' > /tmp/foo
$ echo 'echo dy?: $DYLD_LIBRARY_PATH' >> /tmp/foo
$ echo 'echo ld?: $LD_LIBRARY_PATH' >> /tmp/foo
$ echo 'echo my?: $MY_LIBRARY_PATH' >> /tmp/foo
$ chmod 755 /tmp/foo
$ /tmp/foo
dy?: /usr/local/Cellar/gerbil-scheme/HEAD-a7358fc/v0.17.0-314-ga7358fcb/lib/
ld?: /usr/local/Cellar/gerbil-scheme/HEAD-a7358fc/v0.17.0-314-ga7358fcb/lib/
my?: /usr/local/Cellar/gerbil-scheme/HEAD-a7358fc/v0.17.0-314-ga7358fcb/lib/
#+end_src

Whereas my Mac Mini, also running Ventura, does indeed strip.

#+begin_src sh
% uname -a
Darwin users-Mac-mini.local 22.4.0 Darwin Kernel Version 22.4.0: Mon Mar  6 21:00:41 PST 2023; root:xnu-8796.101.5~3/RELEASE_ARM64_T8103 arm64
% export MY_LIBRARY_PATH=$(gxi -e '(display (path-expand "~~lib"))' -e '(flush-output-port)')
% DYLD_LIBRARY_PATH=${MY_LIBRARY_PATH}
% LD_LIBRARY_PATH=${MY_LIBRARY_PATH}
% export DYLD_LIBRARY_PATH LD_LIBRARY_PATH
% echo '#!/bin/sh' > /tmp/foo
% echo 'echo dy?: $DYLD_LIBRARY_PATH' >> /tmp/foo
% echo 'echo ld?: $LD_LIBRARY_PATH' >> /tmp/foo
% echo 'echo my?: $MY_LIBRARY_PATH' >> /tmp/foo
% chmod 755 /tmp/foo
% /tmp/foo
dy?:
ld?: /opt/homebrew/Cellar/gerbil-scheme/17.9/v0.17.0-314-ga7358fcb/lib/
my?: /opt/homebrew/Cellar/gerbil-scheme/17.9/v0.17.0-314-ga7358fcb/lib/
#+end_src

So be cautious with =DYLD_LIBRARY_PATH= and friends. Even better is to
pass an =-rpath= to =ld= along with a =-L<library-path>= for building
if needed.


** The Mac =ld= and =-rpath=: No strippers allowed!

Because MacOS tries to keep things SI(m)P'le often their =ld= is not capable
of finding our =.so='s, =.a='s, or =.dylib='s.

To deal with that there is the =-rpath= parameter for Apple's =ld=.

#+begin_quote
 -rpath path Add path to the runpath search path list for image being
             created.  At runtime, dyld uses the runpath when
             searching for dylibs whose load path begins with @rpath/.
#+end_quote

What does that mean? In MacOS, every dynamic library has an [[https://developer.apple.com/forums/thread/736719][install
name]]. Now, Xcode seems to [[https://developer.apple.com/forums/thread/736728][do it a certain way]]. But we are not Xcode
and I do not even know what is is or what it entails.

In linux we can just set the =LD_LIBRARY_PATH= if needed but really it
does so much magic to find libraries that it's fairly easy to get by
without setting much of anything.

In MacOS there's the often stripped and must be manually propagated
=DYLD_LIBRARY_PATH=.


I think there's a great workaround where we can define an rpath
relative to the execuable path! There's some more information
available [[https://www.fullstaq.com/knowledge-hub/blogs/an-alternative-to-macos-dyld-library-path][here]].



** Unsupported Upgrades

My first real Apple Computer was a 2012 iMac. But I got it mid-2023. So I wanted to upgrade by
[[https://www.macworld.com/article/672461/how-to-install-macos-on-unsupported-mac.html][installing MacOS on an unsupported Mac]]. It worked but there are a few things different about it.

Here's where I put some workarounds and hacks.

#+begin_src sh
alias otool=/Library/Developer/CommandLineTools/usr/bin/otool
#+end_src


* The Formula                                                      :noexport:
:PROPERTIES:
:header-args:ruby: :tangle gerbil-scheme.rb :padline no
:END:

Homebrew uses [[#RubyIsms][Ruby]] for its DSL. That means =GerbilScheme= is a subclass of =Formula=.


#+begin_src ruby
class GerbilScheme < Formula
  # This .rb file is tangled (AKA generated) from README.org
#+end_src

There's some meta-info that's nice to have.

#+begin_src ruby
  desc "Opinionated dialect of Scheme designed for Systems Programming"
  homepage "https://cons.io"
  license any_of: ["LGPL-2.1-or-later", "Apache-2.0"]
#+end_src

Now where it will install from, and how it gets it. The tag is the version.

#+begin_src ruby
  url "https://github.com/mighty-gerbils/gerbil.git", using: :git,
      revision: "f7d8efcf4a25014b4b969eb6e21a3006d256f22e"
  head "https://github.com/mighty-gerbils/gerbil.git", using: :git
  version "0.18.1"
  revision 2
#+end_src

Now the things it depends on.

#+begin_src ruby
  depends_on "openssl@3"
  depends_on "sqlite"
  depends_on "zlib"
  depends_on "gcc"

  fails_with :clang do
    cause "gerbil-scheme is built with GCC"
  end
#+end_src

Now the dirt. The install process is as it should be! ~./configure && make && make install~.


#+begin_src ruby
  def install
    system "./configure", "--prefix=#{prefix}"
    system "make"
    ENV.deparallelize
    system "make", "install"

#+end_src


Now we want to have homebrew link certain binaries. The default
install has a symlink for the =./bin/= and that's a good thing! This
way we can choose what files actually go in the global bin.


#+begin_src ruby
  
    rm prefix/"bin"
    mkdir prefix/"bin"

    cd prefix/"current/bin" do
       ln "gerbil", prefix/"bin", verbose: true
       cp %w(gxc gxensemble gxi gxpkg gxprof gxtags gxtest), prefix/"bin"
     end
  end

#+end_src

That's that!


#+begin_src ruby

    test do
      assert_equal "0123456789", shell_output("#{bin}/gxi -e \"(for-each write '(0 1 2 3 4 5 6 7 8 9))\"")
    end
#+end_src


#+begin_src ruby
end
#+end_src


# Local Variables:
# org-src-preserve-indentation: t
# End:
