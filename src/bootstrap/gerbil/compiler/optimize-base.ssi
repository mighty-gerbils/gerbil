prelude: :gerbil/core
package: gerbil/compiler
namespace: gxc

(%#begin (%#import
          :gerbil/expander
          :gerbil/compiler/base
          :gerbil/compiler/compile
          (in: :gerbil/core <syntax-case>)
          (in: :gerbil/core <syntax-sugar>))
         (%#export
          #t
          (import: (in: :gerbil/core <syntax-case>))
          (import: (in: :gerbil/core <syntax-sugar>)))
         (%#define-runtime
          current-compile-optimizer-info
          gxc#current-compile-optimizer-info)
         (%#define-runtime
          current-compile-mutators
          gxc#current-compile-mutators)
         (%#define-runtime
          current-compile-local-type
          gxc#current-compile-local-type)
         (%#define-runtime optimizer-info::t gxc#optimizer-info::t)
         (%#define-runtime optimizer-info? gxc#optimizer-info?)
         (%#define-runtime make-optimizer-info gxc#make-optimizer-info)
         (%#define-runtime optimizer-info-type gxc#optimizer-info-type)
         (%#define-runtime optimizer-info-ssxi gxc#optimizer-info-ssxi)
         (%#define-runtime optimizer-info-methods gxc#optimizer-info-methods)
         (%#define-runtime
          optimizer-info-type-set!
          gxc#optimizer-info-type-set!)
         (%#define-runtime
          optimizer-info-ssxi-set!
          gxc#optimizer-info-ssxi-set!)
         (%#define-runtime
          optimizer-info-methods-set!
          gxc#optimizer-info-methods-set!)
         (%#define-runtime &optimizer-info-type gxc#&optimizer-info-type)
         (%#define-runtime &optimizer-info-ssxi gxc#&optimizer-info-ssxi)
         (%#define-runtime &optimizer-info-methods gxc#&optimizer-info-methods)
         (%#define-runtime
          &optimizer-info-type-set!
          gxc#&optimizer-info-type-set!)
         (%#define-runtime
          &optimizer-info-ssxi-set!
          gxc#&optimizer-info-ssxi-set!)
         (%#define-runtime
          &optimizer-info-methods-set!
          gxc#&optimizer-info-methods-set!)
         (%#begin (%#begin-syntax
                   (%#call (%#ref load-module)
                           (%#quote "gerbil/compiler/optimize-base__1")))
                  (%#define-syntax optimizer-info |gxc[:0:]#optimizer-info|))
         (%#define-runtime optimizer-info:::init! gxc#optimizer-info:::init!)
         (%#define-runtime !type::t gxc#!type::t)
         (%#define-runtime !type? gxc#!type?)
         (%#define-runtime make-!type gxc#make-!type)
         (%#define-runtime !type-id gxc#!type-id)
         (%#define-runtime !type-id-set! gxc#!type-id-set!)
         (%#define-runtime &!type-id gxc#&!type-id)
         (%#define-runtime &!type-id-set! gxc#&!type-id-set!)
         (%#define-syntax !type |gxc[:0:]#!type|)
         (%#define-runtime !alias::t gxc#!alias::t)
         (%#define-runtime !alias? gxc#!alias?)
         (%#define-runtime make-!alias gxc#make-!alias)
         (%#define-syntax !alias |gxc[:0:]#!alias|)
         (%#define-runtime !struct-type::t gxc#!struct-type::t)
         (%#define-runtime !struct-type? gxc#!struct-type?)
         (%#define-runtime make-!struct-type gxc#make-!struct-type)
         (%#define-runtime !struct-type-super gxc#!struct-type-super)
         (%#define-runtime !struct-type-fields gxc#!struct-type-fields)
         (%#define-runtime !struct-type-xfields gxc#!struct-type-xfields)
         (%#define-runtime !struct-type-ctor gxc#!struct-type-ctor)
         (%#define-runtime !struct-type-plist gxc#!struct-type-plist)
         (%#define-runtime !struct-type-methods gxc#!struct-type-methods)
         (%#define-runtime !struct-type-super-set! gxc#!struct-type-super-set!)
         (%#define-runtime
          !struct-type-fields-set!
          gxc#!struct-type-fields-set!)
         (%#define-runtime
          !struct-type-xfields-set!
          gxc#!struct-type-xfields-set!)
         (%#define-runtime !struct-type-ctor-set! gxc#!struct-type-ctor-set!)
         (%#define-runtime !struct-type-plist-set! gxc#!struct-type-plist-set!)
         (%#define-runtime
          !struct-type-methods-set!
          gxc#!struct-type-methods-set!)
         (%#define-runtime &!struct-type-super gxc#&!struct-type-super)
         (%#define-runtime &!struct-type-fields gxc#&!struct-type-fields)
         (%#define-runtime &!struct-type-xfields gxc#&!struct-type-xfields)
         (%#define-runtime &!struct-type-ctor gxc#&!struct-type-ctor)
         (%#define-runtime &!struct-type-plist gxc#&!struct-type-plist)
         (%#define-runtime &!struct-type-methods gxc#&!struct-type-methods)
         (%#define-runtime
          &!struct-type-super-set!
          gxc#&!struct-type-super-set!)
         (%#define-runtime
          &!struct-type-fields-set!
          gxc#&!struct-type-fields-set!)
         (%#define-runtime
          &!struct-type-xfields-set!
          gxc#&!struct-type-xfields-set!)
         (%#define-runtime &!struct-type-ctor-set! gxc#&!struct-type-ctor-set!)
         (%#define-runtime
          &!struct-type-plist-set!
          gxc#&!struct-type-plist-set!)
         (%#define-runtime
          &!struct-type-methods-set!
          gxc#&!struct-type-methods-set!)
         (%#define-syntax !struct-type |gxc[:0:]#!struct-type|)
         (%#define-runtime !class-type::t gxc#!class-type::t)
         (%#define-runtime !class-type? gxc#!class-type?)
         (%#define-runtime make-!class-type gxc#make-!class-type)
         (%#define-runtime !class-type-super gxc#!class-type-super)
         (%#define-runtime !class-type-mixin gxc#!class-type-mixin)
         (%#define-runtime !class-type-slots gxc#!class-type-slots)
         (%#define-runtime !class-type-xslots gxc#!class-type-xslots)
         (%#define-runtime !class-type-ctor gxc#!class-type-ctor)
         (%#define-runtime !class-type-plist gxc#!class-type-plist)
         (%#define-runtime !class-type-methods gxc#!class-type-methods)
         (%#define-runtime !class-type-super-set! gxc#!class-type-super-set!)
         (%#define-runtime !class-type-mixin-set! gxc#!class-type-mixin-set!)
         (%#define-runtime !class-type-slots-set! gxc#!class-type-slots-set!)
         (%#define-runtime !class-type-xslots-set! gxc#!class-type-xslots-set!)
         (%#define-runtime !class-type-ctor-set! gxc#!class-type-ctor-set!)
         (%#define-runtime !class-type-plist-set! gxc#!class-type-plist-set!)
         (%#define-runtime
          !class-type-methods-set!
          gxc#!class-type-methods-set!)
         (%#define-runtime &!class-type-super gxc#&!class-type-super)
         (%#define-runtime &!class-type-mixin gxc#&!class-type-mixin)
         (%#define-runtime &!class-type-slots gxc#&!class-type-slots)
         (%#define-runtime &!class-type-xslots gxc#&!class-type-xslots)
         (%#define-runtime &!class-type-ctor gxc#&!class-type-ctor)
         (%#define-runtime &!class-type-plist gxc#&!class-type-plist)
         (%#define-runtime &!class-type-methods gxc#&!class-type-methods)
         (%#define-runtime &!class-type-super-set! gxc#&!class-type-super-set!)
         (%#define-runtime &!class-type-mixin-set! gxc#&!class-type-mixin-set!)
         (%#define-runtime &!class-type-slots-set! gxc#&!class-type-slots-set!)
         (%#define-runtime
          &!class-type-xslots-set!
          gxc#&!class-type-xslots-set!)
         (%#define-runtime &!class-type-ctor-set! gxc#&!class-type-ctor-set!)
         (%#define-runtime &!class-type-plist-set! gxc#&!class-type-plist-set!)
         (%#define-runtime
          &!class-type-methods-set!
          gxc#&!class-type-methods-set!)
         (%#define-syntax !class-type |gxc[:0:]#!class-type|)
         (%#define-runtime !procedure::t gxc#!procedure::t)
         (%#define-runtime !procedure? gxc#!procedure?)
         (%#define-runtime make-!procedure gxc#make-!procedure)
         (%#define-syntax !procedure |gxc[:0:]#!procedure|)
         (%#define-runtime !struct-pred::t gxc#!struct-pred::t)
         (%#define-runtime !struct-pred? gxc#!struct-pred?)
         (%#define-runtime make-!struct-pred gxc#make-!struct-pred)
         (%#define-syntax !struct-pred |gxc[:0:]#!struct-pred|)
         (%#define-runtime !struct-cons::t gxc#!struct-cons::t)
         (%#define-runtime !struct-cons? gxc#!struct-cons?)
         (%#define-runtime make-!struct-cons gxc#make-!struct-cons)
         (%#define-syntax !struct-cons |gxc[:0:]#!struct-cons|)
         (%#define-runtime !struct-getf::t gxc#!struct-getf::t)
         (%#define-runtime !struct-getf? gxc#!struct-getf?)
         (%#define-runtime make-!struct-getf gxc#make-!struct-getf)
         (%#define-runtime !struct-getf-off gxc#!struct-getf-off)
         (%#define-runtime !struct-getf-unchecked? gxc#!struct-getf-unchecked?)
         (%#define-runtime !struct-getf-off-set! gxc#!struct-getf-off-set!)
         (%#define-runtime
          !struct-getf-unchecked?-set!
          gxc#!struct-getf-unchecked?-set!)
         (%#define-runtime &!struct-getf-off gxc#&!struct-getf-off)
         (%#define-runtime
          &!struct-getf-unchecked?
          gxc#&!struct-getf-unchecked?)
         (%#define-runtime &!struct-getf-off-set! gxc#&!struct-getf-off-set!)
         (%#define-runtime
          &!struct-getf-unchecked?-set!
          gxc#&!struct-getf-unchecked?-set!)
         (%#define-syntax !struct-getf |gxc[:0:]#!struct-getf|)
         (%#define-runtime !struct-setf::t gxc#!struct-setf::t)
         (%#define-runtime !struct-setf? gxc#!struct-setf?)
         (%#define-runtime make-!struct-setf gxc#make-!struct-setf)
         (%#define-runtime !struct-setf-off gxc#!struct-setf-off)
         (%#define-runtime !struct-setf-unchecked? gxc#!struct-setf-unchecked?)
         (%#define-runtime !struct-setf-off-set! gxc#!struct-setf-off-set!)
         (%#define-runtime
          !struct-setf-unchecked?-set!
          gxc#!struct-setf-unchecked?-set!)
         (%#define-runtime &!struct-setf-off gxc#&!struct-setf-off)
         (%#define-runtime
          &!struct-setf-unchecked?
          gxc#&!struct-setf-unchecked?)
         (%#define-runtime &!struct-setf-off-set! gxc#&!struct-setf-off-set!)
         (%#define-runtime
          &!struct-setf-unchecked?-set!
          gxc#&!struct-setf-unchecked?-set!)
         (%#define-syntax !struct-setf |gxc[:0:]#!struct-setf|)
         (%#define-runtime !class-pred::t gxc#!class-pred::t)
         (%#define-runtime !class-pred? gxc#!class-pred?)
         (%#define-runtime make-!class-pred gxc#make-!class-pred)
         (%#define-syntax !class-pred |gxc[:0:]#!class-pred|)
         (%#define-runtime !class-cons::t gxc#!class-cons::t)
         (%#define-runtime !class-cons? gxc#!class-cons?)
         (%#define-runtime make-!class-cons gxc#make-!class-cons)
         (%#define-syntax !class-cons |gxc[:0:]#!class-cons|)
         (%#define-runtime !class-getf::t gxc#!class-getf::t)
         (%#define-runtime !class-getf? gxc#!class-getf?)
         (%#define-runtime make-!class-getf gxc#make-!class-getf)
         (%#define-runtime !class-getf-slot gxc#!class-getf-slot)
         (%#define-runtime !class-getf-unchecked? gxc#!class-getf-unchecked?)
         (%#define-runtime !class-getf-slot-set! gxc#!class-getf-slot-set!)
         (%#define-runtime
          !class-getf-unchecked?-set!
          gxc#!class-getf-unchecked?-set!)
         (%#define-runtime &!class-getf-slot gxc#&!class-getf-slot)
         (%#define-runtime &!class-getf-unchecked? gxc#&!class-getf-unchecked?)
         (%#define-runtime &!class-getf-slot-set! gxc#&!class-getf-slot-set!)
         (%#define-runtime
          &!class-getf-unchecked?-set!
          gxc#&!class-getf-unchecked?-set!)
         (%#define-syntax !class-getf |gxc[:0:]#!class-getf|)
         (%#define-runtime !class-setf::t gxc#!class-setf::t)
         (%#define-runtime !class-setf? gxc#!class-setf?)
         (%#define-runtime make-!class-setf gxc#make-!class-setf)
         (%#define-runtime !class-setf-slot gxc#!class-setf-slot)
         (%#define-runtime !class-setf-unchecked? gxc#!class-setf-unchecked?)
         (%#define-runtime !class-setf-slot-set! gxc#!class-setf-slot-set!)
         (%#define-runtime
          !class-setf-unchecked?-set!
          gxc#!class-setf-unchecked?-set!)
         (%#define-runtime &!class-setf-slot gxc#&!class-setf-slot)
         (%#define-runtime &!class-setf-unchecked? gxc#&!class-setf-unchecked?)
         (%#define-runtime &!class-setf-slot-set! gxc#&!class-setf-slot-set!)
         (%#define-runtime
          &!class-setf-unchecked?-set!
          gxc#&!class-setf-unchecked?-set!)
         (%#define-syntax !class-setf |gxc[:0:]#!class-setf|)
         (%#define-runtime !lambda::t gxc#!lambda::t)
         (%#define-runtime !lambda? gxc#!lambda?)
         (%#define-runtime make-!lambda gxc#make-!lambda)
         (%#define-runtime !lambda-arity gxc#!lambda-arity)
         (%#define-runtime !lambda-dispatch gxc#!lambda-dispatch)
         (%#define-runtime !lambda-inline gxc#!lambda-inline)
         (%#define-runtime !lambda-inline-typedecl gxc#!lambda-inline-typedecl)
         (%#define-runtime !lambda-arity-set! gxc#!lambda-arity-set!)
         (%#define-runtime !lambda-dispatch-set! gxc#!lambda-dispatch-set!)
         (%#define-runtime !lambda-inline-set! gxc#!lambda-inline-set!)
         (%#define-runtime
          !lambda-inline-typedecl-set!
          gxc#!lambda-inline-typedecl-set!)
         (%#define-runtime &!lambda-arity gxc#&!lambda-arity)
         (%#define-runtime &!lambda-dispatch gxc#&!lambda-dispatch)
         (%#define-runtime &!lambda-inline gxc#&!lambda-inline)
         (%#define-runtime
          &!lambda-inline-typedecl
          gxc#&!lambda-inline-typedecl)
         (%#define-runtime &!lambda-arity-set! gxc#&!lambda-arity-set!)
         (%#define-runtime &!lambda-dispatch-set! gxc#&!lambda-dispatch-set!)
         (%#define-runtime &!lambda-inline-set! gxc#&!lambda-inline-set!)
         (%#define-runtime
          &!lambda-inline-typedecl-set!
          gxc#&!lambda-inline-typedecl-set!)
         (%#define-syntax !lambda |gxc[:0:]#!lambda|)
         (%#define-runtime !case-lambda::t gxc#!case-lambda::t)
         (%#define-runtime !case-lambda? gxc#!case-lambda?)
         (%#define-runtime make-!case-lambda gxc#make-!case-lambda)
         (%#define-runtime !case-lambda-clauses gxc#!case-lambda-clauses)
         (%#define-runtime
          !case-lambda-clauses-set!
          gxc#!case-lambda-clauses-set!)
         (%#define-runtime &!case-lambda-clauses gxc#&!case-lambda-clauses)
         (%#define-runtime
          &!case-lambda-clauses-set!
          gxc#&!case-lambda-clauses-set!)
         (%#define-syntax !case-lambda |gxc[:0:]#!case-lambda|)
         (%#define-runtime !kw-lambda::t gxc#!kw-lambda::t)
         (%#define-runtime !kw-lambda? gxc#!kw-lambda?)
         (%#define-runtime make-!kw-lambda gxc#make-!kw-lambda)
         (%#define-runtime !kw-lambda-table gxc#!kw-lambda-table)
         (%#define-runtime !kw-lambda-dispatch gxc#!kw-lambda-dispatch)
         (%#define-runtime !kw-lambda-table-set! gxc#!kw-lambda-table-set!)
         (%#define-runtime
          !kw-lambda-dispatch-set!
          gxc#!kw-lambda-dispatch-set!)
         (%#define-runtime &!kw-lambda-table gxc#&!kw-lambda-table)
         (%#define-runtime &!kw-lambda-dispatch gxc#&!kw-lambda-dispatch)
         (%#define-runtime &!kw-lambda-table-set! gxc#&!kw-lambda-table-set!)
         (%#define-runtime
          &!kw-lambda-dispatch-set!
          gxc#&!kw-lambda-dispatch-set!)
         (%#define-syntax !kw-lambda |gxc[:0:]#!kw-lambda|)
         (%#define-runtime !kw-lambda-primary::t gxc#!kw-lambda-primary::t)
         (%#define-runtime !kw-lambda-primary? gxc#!kw-lambda-primary?)
         (%#define-runtime make-!kw-lambda-primary gxc#make-!kw-lambda-primary)
         (%#define-runtime !kw-lambda-primary-keys gxc#!kw-lambda-primary-keys)
         (%#define-runtime !kw-lambda-primary-main gxc#!kw-lambda-primary-main)
         (%#define-runtime
          !kw-lambda-primary-keys-set!
          gxc#!kw-lambda-primary-keys-set!)
         (%#define-runtime
          !kw-lambda-primary-main-set!
          gxc#!kw-lambda-primary-main-set!)
         (%#define-runtime
          &!kw-lambda-primary-keys
          gxc#&!kw-lambda-primary-keys)
         (%#define-runtime
          &!kw-lambda-primary-main
          gxc#&!kw-lambda-primary-main)
         (%#define-runtime
          &!kw-lambda-primary-keys-set!
          gxc#&!kw-lambda-primary-keys-set!)
         (%#define-runtime
          &!kw-lambda-primary-main-set!
          gxc#&!kw-lambda-primary-main-set!)
         (%#define-syntax !kw-lambda-primary |gxc[:0:]#!kw-lambda-primary|)
         (%#define-runtime !primitive::t gxc#!primitive::t)
         (%#define-runtime !primitive? gxc#!primitive?)
         (%#define-runtime make-!primitive gxc#make-!primitive)
         (%#define-syntax !primitive |gxc[:0:]#!primitive|)
         (%#define-runtime !primitive-lambda::t gxc#!primitive-lambda::t)
         (%#define-runtime !primitive-lambda? gxc#!primitive-lambda?)
         (%#define-runtime make-!primitive-lambda gxc#make-!primitive-lambda)
         (%#define-syntax !primitive-lambda |gxc[:0:]#!primitive-lambda|)
         (%#define-runtime
          !primitive-case-lambda::t
          gxc#!primitive-case-lambda::t)
         (%#define-runtime !primitive-case-lambda? gxc#!primitive-case-lambda?)
         (%#define-runtime
          make-!primitive-case-lambda
          gxc#make-!primitive-case-lambda)
         (%#define-syntax
          !primitive-case-lambda
          |gxc[:0:]#!primitive-case-lambda|)
         (%#define-runtime !struct-type:::init! gxc#!struct-type:::init!)
         (%#define-runtime !class-type:::init! gxc#!class-type:::init!)
         (%#begin (%#define-runtime !lambda:::init!__% gxc#!lambda:::init!__%)
                  (%#begin (%#define-runtime
                            !lambda:::init!__0
                            gxc#!lambda:::init!__0)
                           (%#define-runtime
                            !lambda:::init!__1
                            gxc#!lambda:::init!__1)
                           (%#define-runtime
                            !lambda:::init!
                            gxc#!lambda:::init!)))
         (%#define-runtime
          !primitive-lambda:::init!
          gxc#!primitive-lambda:::init!)
         (%#define-runtime
          !primitive-case-lambda:::init!
          gxc#!primitive-case-lambda:::init!)
         (%#define-runtime !struct-type-vtab gxc#!struct-type-vtab)
         (%#define-runtime !class-type-vtab gxc#!class-type-vtab)
         (%#define-runtime !type-vtab gxc#!type-vtab)
         (%#define-runtime
          !struct-type-lookup-method
          gxc#!struct-type-lookup-method)
         (%#define-runtime
          !class-type-lookup-method
          gxc#!class-type-lookup-method)
         (%#define-runtime !type-lookup-method gxc#!type-lookup-method)
         (%#define-runtime !class-type-complete? gxc#!class-type-complete?)
         (%#begin (%#define-runtime
                   optimizer-declare-type!__%
                   gxc#optimizer-declare-type!__%)
                  (%#begin (%#define-runtime
                            optimizer-declare-type!__0
                            gxc#optimizer-declare-type!__0)
                           (%#define-runtime
                            optimizer-declare-type!
                            gxc#optimizer-declare-type!)))
         (%#begin (%#define-runtime
                   optimizer-clear-type!__%
                   gxc#optimizer-clear-type!__%)
                  (%#begin (%#define-runtime
                            optimizer-clear-type!__0
                            gxc#optimizer-clear-type!__0)
                           (%#define-runtime
                            optimizer-clear-type!
                            gxc#optimizer-clear-type!)))
         (%#begin (%#define-runtime
                   optimizer-declare-method!__%
                   gxc#optimizer-declare-method!__%)
                  (%#begin (%#define-runtime
                            optimizer-declare-method!__0
                            gxc#optimizer-declare-method!__0)
                           (%#define-runtime
                            optimizer-declare-method!
                            gxc#optimizer-declare-method!)))
         (%#define-runtime optimizer-lookup-type gxc#optimizer-lookup-type)
         (%#define-runtime optimizer-resolve-type gxc#optimizer-resolve-type)
         (%#define-runtime optimizer-lookup-method gxc#optimizer-lookup-method)
         (%#define-runtime
          optimizer-top-level-method!
          gxc#optimizer-top-level-method!)
         (%#define-runtime
          optimizer-top-level-method?
          gxc#optimizer-top-level-method?)
         (%#define-runtime identifier-symbol gxc#identifier-symbol))
(%#call (%#ref load-module) (%#quote "gerbil/compiler/optimize-base__0"))
