prelude: :gerbil/core
package: gerbil/compiler
namespace: gxc

(%#begin (%#import
          :gerbil/compiler/base
          :gerbil/expander
          (in: :gerbil/core <syntax-case>)
          (in: :gerbil/core <syntax-sugar>)
          (spec:
           (:gerbil/gambit/hvectors)
           (0 f64vector? 0 f64vector?)
           (0 s64vector? 0 s64vector?)
           (0 u64vector? 0 u64vector?)
           (0 s32vector? 0 s32vector?)
           (0 u8vector? 0 u8vector?)
           (0 u16vector? 0 u16vector?)
           (0 u32vector? 0 u32vector?)
           (0 s16vector? 0 s16vector?)
           (0 s8vector? 0 s8vector?)
           (0 f32vector? 0 f32vector?)))
         (%#export #t)
         (%#define-runtime current-compile-methods gxc#current-compile-methods)
         (%#define-runtime current-compile-lift gxc#current-compile-lift)
         (%#define-runtime compile-e gxc#compile-e)
         (%#begin (%#begin-syntax
                   (%#call (%#ref _gx#load-module)
                           (%#quote "gerbil/compiler/compile__1")))
                  (%#define-syntax
                   defcompile-method
                   |gxc[:0:]#defcompile-method|))
         (%#define-runtime &void-expression gxc#&void-expression)
         (%#define-runtime &void-special-form gxc#&void-special-form)
         (%#define-runtime &void gxc#&void)
         (%#define-runtime &false-expression gxc#&false-expression)
         (%#define-runtime &false-special-form gxc#&false-special-form)
         (%#define-runtime &false gxc#&false)
         (%#define-runtime &collect-bindings gxc#&collect-bindings)
         (%#define-runtime apply-collect-bindings gxc#apply-collect-bindings)
         (%#define-runtime &lift-modules gxc#&lift-modules)
         (%#define-runtime apply-lift-modules gxc#apply-lift-modules)
         (%#define-runtime &find-runtime-code gxc#&find-runtime-code)
         (%#define-runtime apply-find-runtime-code gxc#apply-find-runtime-code)
         (%#define-runtime &find-lambda-expression gxc#&find-lambda-expression)
         (%#define-runtime
          apply-find-lambda-expression
          gxc#apply-find-lambda-expression)
         (%#define-runtime &generate-runtime-empty gxc#&generate-runtime-empty)
         (%#define-runtime &generate-loader gxc#&generate-loader)
         (%#define-runtime apply-generate-loader gxc#apply-generate-loader)
         (%#define-runtime &generate-runtime gxc#&generate-runtime)
         (%#define-runtime apply-generate-runtime gxc#apply-generate-runtime)
         (%#define-runtime &generate-runtime-phi gxc#&generate-runtime-phi)
         (%#define-runtime
          apply-generate-runtime-phi
          gxc#apply-generate-runtime-phi)
         (%#define-runtime
          &collect-expression-refs
          gxc#&collect-expression-refs)
         (%#define-runtime
          apply-collect-expression-refs
          gxc#apply-collect-expression-refs)
         (%#define-runtime &generate-meta gxc#&generate-meta)
         (%#define-runtime apply-generate-meta gxc#apply-generate-meta)
         (%#define-runtime &generate-meta-phi gxc#&generate-meta-phi)
         (%#define-runtime apply-generate-meta-phi gxc#apply-generate-meta-phi)
         (%#define-runtime collect-begin% gxc#collect-begin%)
         (%#define-runtime collect-begin-syntax% gxc#collect-begin-syntax%)
         (%#define-runtime collect-module% gxc#collect-module%)
         (%#define-runtime collect-body-lambda% gxc#collect-body-lambda%)
         (%#define-runtime
          collect-body-case-lambda%
          gxc#collect-body-case-lambda%)
         (%#define-runtime
          collect-body-let-values%
          gxc#collect-body-let-values%)
         (%#define-runtime collect-body-setq% gxc#collect-body-setq%)
         (%#define-runtime collect-operands gxc#collect-operands)
         (%#define-runtime
          collect-bindings-define-values%
          gxc#collect-bindings-define-values%)
         (%#define-runtime
          collect-bindings-define-syntax%
          gxc#collect-bindings-define-syntax%)
         (%#define-runtime lift-modules-module% gxc#lift-modules-module%)
         (%#define-runtime add-module-binding! gxc#add-module-binding!)
         (%#define-runtime
          generate-runtime-binding-id
          gxc#generate-runtime-binding-id)
         (%#define-runtime
          generate-runtime-binding-id*
          gxc#generate-runtime-binding-id*)
         (%#begin (%#define-runtime
                   generate-runtime-gensym-reference__opt-lambda10016
                   gxc#generate-runtime-gensym-reference__opt-lambda10016)
                  (%#begin (%#define-runtime
                            generate-runtime-gensym-reference__0
                            gxc#generate-runtime-gensym-reference__0)
                           (%#define-runtime
                            generate-runtime-gensym-reference
                            gxc#generate-runtime-gensym-reference)))
         (%#define-runtime
          generate-runtime-identifier
          gxc#generate-runtime-identifier)
         (%#define-runtime
          generate-runtime-identifier-key
          gxc#generate-runtime-identifier-key)
         (%#begin (%#define-runtime
                   generate-runtime-temporary__opt-lambda9962
                   gxc#generate-runtime-temporary__opt-lambda9962)
                  (%#begin (%#define-runtime
                            generate-runtime-temporary__0
                            gxc#generate-runtime-temporary__0)
                           (%#define-runtime
                            generate-runtime-temporary
                            gxc#generate-runtime-temporary)))
         (%#define-runtime generate-runtime-empty gxc#generate-runtime-empty)
         (%#define-runtime generate-runtime-begin% gxc#generate-runtime-begin%)
         (%#define-runtime
          generate-runtime-begin-foreign%
          gxc#generate-runtime-begin-foreign%)
         (%#define-runtime
          generate-runtime-declare%
          gxc#generate-runtime-declare%)
         (%#define-runtime
          generate-runtime-define-values%
          gxc#generate-runtime-define-values%)
         (%#define-runtime
          generate-runtime-check-values
          gxc#generate-runtime-check-values)
         (%#define-runtime
          generate-runtime-lambda%
          gxc#generate-runtime-lambda%)
         (%#define-runtime
          generate-runtime-lambda-head
          gxc#generate-runtime-lambda-head)
         (%#define-runtime
          generate-runtime-case-lambda%
          gxc#generate-runtime-case-lambda%)
         (%#begin (%#define-runtime
                   generate-runtime-let-values%__opt-lambda7076
                   gxc#generate-runtime-let-values%__opt-lambda7076)
                  (%#begin (%#define-runtime
                            generate-runtime-let-values%__0
                            gxc#generate-runtime-let-values%__0)
                           (%#define-runtime
                            generate-runtime-let-values%
                            gxc#generate-runtime-let-values%)))
         (%#define-runtime
          generate-runtime-let-values-bind
          gxc#generate-runtime-let-values-bind)
         (%#begin (%#define-runtime
                   generate-runtime-letrec-values%__opt-lambda6655
                   gxc#generate-runtime-letrec-values%__opt-lambda6655)
                  (%#begin (%#define-runtime
                            generate-runtime-letrec-values%__0
                            gxc#generate-runtime-letrec-values%__0)
                           (%#define-runtime
                            generate-runtime-letrec-values%
                            gxc#generate-runtime-letrec-values%)))
         (%#define-runtime
          generate-runtime-letrec*-values%
          gxc#generate-runtime-letrec*-values%)
         (%#define-runtime
          generate-runtime-simple-let?
          gxc#generate-runtime-simple-let?)
         (%#define-runtime
          generate-runtime-simple-let
          gxc#generate-runtime-simple-let)
         (%#define-runtime generate-runtime-quote% gxc#generate-runtime-quote%)
         (%#define-runtime generate-runtime-call% gxc#generate-runtime-call%)
         (%#define-runtime generate-runtime-if% gxc#generate-runtime-if%)
         (%#define-runtime generate-runtime-ref% gxc#generate-runtime-ref%)
         (%#define-runtime generate-runtime-setq% gxc#generate-runtime-setq%)
         (%#define-runtime
          generate-runtime-struct-instancep%
          gxc#generate-runtime-struct-instancep%)
         (%#define-runtime
          generate-runtime-struct-direct-instancep%
          gxc#generate-runtime-struct-direct-instancep%)
         (%#define-runtime
          generate-runtime-struct-ref%
          gxc#generate-runtime-struct-ref%)
         (%#define-runtime
          generate-runtime-struct-setq%
          gxc#generate-runtime-struct-setq%)
         (%#define-runtime
          generate-runtime-struct-direct-ref%
          gxc#generate-runtime-struct-direct-ref%)
         (%#define-runtime
          generate-runtime-struct-direct-setq%
          gxc#generate-runtime-struct-direct-setq%)
         (%#define-runtime
          generate-runtime-struct-unchecked-ref%
          gxc#generate-runtime-struct-unchecked-ref%)
         (%#define-runtime
          generate-runtime-struct-unchecked-setq%
          gxc#generate-runtime-struct-unchecked-setq%)
         (%#define-runtime
          generate-runtime-loader-import%
          gxc#generate-runtime-loader-import%)
         (%#define-runtime
          generate-runtime-phi-quote-syntax%
          gxc#generate-runtime-phi-quote-syntax%)
         (%#define-runtime
          generate-runtime-phi-define-runtime%
          gxc#generate-runtime-phi-define-runtime%)
         (%#define-runtime generate-meta-begin% gxc#generate-meta-begin%)
         (%#define-runtime
          generate-meta-begin-syntax%
          gxc#generate-meta-begin-syntax%)
         (%#define-runtime generate-meta-module% gxc#generate-meta-module%)
         (%#define-runtime
          generate-meta-import-path
          gxc#generate-meta-import-path)
         (%#define-runtime current-context-chain gxc#current-context-chain)
         (%#define-runtime generate-meta-import% gxc#generate-meta-import%)
         (%#define-runtime generate-meta-export% gxc#generate-meta-export%)
         (%#define-runtime generate-meta-provide% gxc#generate-meta-provide%)
         (%#define-runtime generate-meta-extern% gxc#generate-meta-extern%)
         (%#define-runtime
          generate-meta-define-values%
          gxc#generate-meta-define-values%)
         (%#define-runtime
          generate-meta-define-syntax%
          gxc#generate-meta-define-syntax%)
         (%#define-runtime
          generate-meta-define-alias%
          gxc#generate-meta-define-alias%)
         (%#define-runtime
          generate-meta-phi-define-values%
          gxc#generate-meta-phi-define-values%)
         (%#define-runtime generate-meta-phi-expr gxc#generate-meta-phi-expr)
         (%#define-runtime meta-state::t gxc#meta-state::t)
         (%#define-runtime meta-state? gxc#meta-state?)
         (%#define-runtime make-meta-state gxc#make-meta-state)
         (%#define-runtime meta-state-src gxc#meta-state-src)
         (%#define-runtime meta-state-n gxc#meta-state-n)
         (%#define-runtime meta-state-open gxc#meta-state-open)
         (%#define-runtime meta-state-blocks gxc#meta-state-blocks)
         (%#define-runtime meta-state-src-set! gxc#meta-state-src-set!)
         (%#define-runtime meta-state-n-set! gxc#meta-state-n-set!)
         (%#define-runtime meta-state-open-set! gxc#meta-state-open-set!)
         (%#define-runtime meta-state-blocks-set! gxc#meta-state-blocks-set!)
         (%#define-syntax meta-state |gxc[:0:]#meta-state|)
         (%#define-runtime meta-state:::init! gxc#meta-state:::init!)
         (%#define-runtime meta-state-block::t gxc#meta-state-block::t)
         (%#define-runtime meta-state-block? gxc#meta-state-block?)
         (%#define-runtime make-meta-state-block gxc#make-meta-state-block)
         (%#define-runtime meta-state-block-ctx gxc#meta-state-block-ctx)
         (%#define-runtime meta-state-block-phi gxc#meta-state-block-phi)
         (%#define-runtime meta-state-block-n gxc#meta-state-block-n)
         (%#define-runtime meta-state-block-code gxc#meta-state-block-code)
         (%#define-runtime
          meta-state-block-ctx-set!
          gxc#meta-state-block-ctx-set!)
         (%#define-runtime
          meta-state-block-phi-set!
          gxc#meta-state-block-phi-set!)
         (%#define-runtime meta-state-block-n-set! gxc#meta-state-block-n-set!)
         (%#define-runtime
          meta-state-block-code-set!
          gxc#meta-state-block-code-set!)
         (%#define-syntax meta-state-block |gxc[:0:]#meta-state-block|)
         (%#define-runtime meta-state-begin-phi! gxc#meta-state-begin-phi!)
         (%#define-runtime meta-state-add-phi! gxc#meta-state-add-phi!)
         (%#define-runtime meta-state-end-phi! gxc#meta-state-end-phi!)
         (%#define-runtime meta-state-end! gxc#meta-state-end!)
         (%#define-runtime collect-expression-refs gxc#collect-expression-refs)
         (%#define-runtime collect-refs-ref% gxc#collect-refs-ref%)
         (%#define-runtime collect-refs-setq% gxc#collect-refs-setq%)
         (%#define-runtime find-runtime-begin% gxc#find-runtime-begin%)
         (%#define-runtime
          find-lambda-expression-begin%
          gxc#find-lambda-expression-begin%)
         (%#define-runtime
          find-lambda-expression-let-values%
          gxc#find-lambda-expression-let-values%))
(%#call (%#ref _gx#load-module) (%#quote "gerbil/compiler/compile__0"))
