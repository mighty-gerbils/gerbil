prelude: :gerbil/compiler/ssxi
package: gerbil/compiler

(begin
  (declare-type
   gxc#optimizer-info-init!
   (@lambda 0
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#optimize!
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#optimizer-load-builtin-ssxi
   (@lambda 1
            #f
            signature:
            (return:
             void::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#optimizer-load-ssxi-deps
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#optimizer-load-ssxi
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#optimizer-import-ssxi
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#optimizer-import-ssxi-by-id
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#optimize-source
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-class
   gxc#::generate-ssxi::t
   (@class gxc#::generate-ssxi::t
           (gxc#::generate-runtime-empty::t)
           (gxc#::generate-runtime-empty::t object::t t::t)
           ()
           ()
           #f
           #f
           #t
           #f
           #f
           #f))
  (declare-type
   gxc#::generate-ssxi::t
   (optimizer-resolve-class '(typedecl gxc#::generate-ssxi::t) 'class::t))
  (declare-type gxc#::generate-ssxi? (@predicate gxc#::generate-ssxi::t))
  (declare-type gxc#make-::generate-ssxi (@constructor gxc#::generate-ssxi::t))
  (declare-type
   gxc#::generate-ssxi-bind-methods!
   (optimizer-resolve-class
    '(typedecl gxc#::generate-ssxi-bind-methods!)
    'promise::t))
  (declare-type
   gxc#apply-generate-ssxi
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#generate-ssxi-begin-syntax%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#generate-ssxi-module%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#generate-ssxi-define-values%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#generate-ssxi-call%
   (@lambda 2
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#generate-ssxi-begin-annotation%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!alias::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!class::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!predicate::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!constructor::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!accessor::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!mutator::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!interface::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!lambda::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!case-lambda::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!kw-lambda::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!kw-lambda-primary::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize)))
  (declare-type
   gxc#!primitive-predicate::typedecl
   (@lambda 1
            #f
            signature:
            (return:
             pair::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize))))
