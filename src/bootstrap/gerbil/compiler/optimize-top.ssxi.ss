prelude: :gerbil/compiler/ssxi
package: gerbil/compiler

(begin
  (declare-class
   gxc#::collect-top-level-type-info::t
   (@class gxc#::collect-top-level-type-info::t
           (gxc#::void::t)
           (gxc#::void::t
            gxc#::void-special-form::t
            gxc#::void-expression::t
            object::t
            t::t)
           ()
           ()
           #f
           #f
           #t
           #f
           #f
           #f))
  (declare-type
   gxc#::collect-top-level-type-info::t
   (optimizer-resolve-class
    '(typedecl gxc#::collect-top-level-type-info::t)
    'class::t))
  (declare-type
   gxc#::collect-top-level-type-info?
   (@predicate gxc#::collect-top-level-type-info::t))
  (declare-type
   gxc#make-::collect-top-level-type-info
   (@constructor gxc#::collect-top-level-type-info::t))
  (declare-type
   gxc#::collect-top-level-type-info-bind-methods!
   (optimizer-resolve-class
    '(typedecl gxc#::collect-top-level-type-info-bind-methods!)
    'promise::t))
  (declare-type
   gxc#apply-collect-top-level-type-info
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-class
   gxc#::collect-top-level-declarations::t
   (@class gxc#::collect-top-level-declarations::t
           (gxc#::void::t)
           (gxc#::void::t
            gxc#::void-special-form::t
            gxc#::void-expression::t
            object::t
            t::t)
           ()
           ()
           #f
           #f
           #t
           #f
           #f
           #f))
  (declare-type
   gxc#::collect-top-level-declarations::t
   (optimizer-resolve-class
    '(typedecl gxc#::collect-top-level-declarations::t)
    'class::t))
  (declare-type
   gxc#::collect-top-level-declarations?
   (@predicate gxc#::collect-top-level-declarations::t))
  (declare-type
   gxc#make-::collect-top-level-declarations
   (@constructor gxc#::collect-top-level-declarations::t))
  (declare-type
   gxc#::collect-top-level-declarations-bind-methods!
   (optimizer-resolve-class
    '(typedecl gxc#::collect-top-level-declarations-bind-methods!)
    'promise::t))
  (declare-type
   gxc#apply-collect-top-level-declarations
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-class
   gxc#::basic-expression-top-level-type::t
   (@class gxc#::basic-expression-top-level-type::t
           (gxc#::false::t)
           (gxc#::false::t
            gxc#::false-special-form::t
            gxc#::false-expression::t
            object::t
            t::t)
           ()
           ()
           #f
           #f
           #t
           #f
           #f
           #f))
  (declare-type
   gxc#::basic-expression-top-level-type::t
   (optimizer-resolve-class
    '(typedecl gxc#::basic-expression-top-level-type::t)
    'class::t))
  (declare-type
   gxc#::basic-expression-top-level-type?
   (@predicate gxc#::basic-expression-top-level-type::t))
  (declare-type
   gxc#make-::basic-expression-top-level-type
   (@constructor gxc#::basic-expression-top-level-type::t))
  (declare-type
   gxc#::basic-expression-top-level-type-bind-methods!
   (optimizer-resolve-class
    '(typedecl gxc#::basic-expression-top-level-type-bind-methods!)
    'promise::t))
  (declare-type
   gxc#apply-basic-expression-top-level-type
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-class
   gxc#::collect-type-info::t
   (@class gxc#::collect-type-info::t
           (gxc#::void::t)
           (gxc#::void::t
            gxc#::void-special-form::t
            gxc#::void-expression::t
            object::t
            t::t)
           ()
           ()
           #f
           #f
           #t
           #f
           #f
           #f))
  (declare-type
   gxc#::collect-type-info::t
   (optimizer-resolve-class '(typedecl gxc#::collect-type-info::t) 'class::t))
  (declare-type
   gxc#::collect-type-info?
   (@predicate gxc#::collect-type-info::t))
  (declare-type
   gxc#make-::collect-type-info
   (@constructor gxc#::collect-type-info::t))
  (declare-type
   gxc#::collect-type-info-bind-methods!
   (optimizer-resolve-class
    '(typedecl gxc#::collect-type-info-bind-methods!)
    'promise::t))
  (declare-type
   gxc#apply-collect-type-info
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-class
   gxc#::collect-mutable-type-info::t
   (@class gxc#::collect-mutable-type-info::t
           (gxc#::void::t)
           (gxc#::void::t
            gxc#::void-special-form::t
            gxc#::void-expression::t
            object::t
            t::t)
           ()
           ()
           #f
           #f
           #t
           #f
           #f
           #f))
  (declare-type
   gxc#::collect-mutable-type-info::t
   (optimizer-resolve-class
    '(typedecl gxc#::collect-mutable-type-info::t)
    'class::t))
  (declare-type
   gxc#::collect-mutable-type-info?
   (@predicate gxc#::collect-mutable-type-info::t))
  (declare-type
   gxc#make-::collect-mutable-type-info
   (@constructor gxc#::collect-mutable-type-info::t))
  (declare-type
   gxc#::collect-mutable-type-info-bind-methods!
   (optimizer-resolve-class
    '(typedecl gxc#::collect-mutable-type-info-bind-methods!)
    'promise::t))
  (declare-type
   gxc#apply-collect-mutable-type-info
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-class
   gxc#::refine-type-info::t
   (@class gxc#::refine-type-info::t
           (gxc#::void::t)
           (gxc#::void::t
            gxc#::void-special-form::t
            gxc#::void-expression::t
            object::t
            t::t)
           ()
           ()
           #f
           #f
           #t
           #f
           #f
           #f))
  (declare-type
   gxc#::refine-type-info::t
   (optimizer-resolve-class '(typedecl gxc#::refine-type-info::t) 'class::t))
  (declare-type gxc#::refine-type-info? (@predicate gxc#::refine-type-info::t))
  (declare-type
   gxc#make-::refine-type-info
   (@constructor gxc#::refine-type-info::t))
  (declare-type
   gxc#::refine-type-info-bind-methods!
   (optimizer-resolve-class
    '(typedecl gxc#::refine-type-info-bind-methods!)
    'promise::t))
  (declare-type
   gxc#apply-refine-type-info
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-class
   gxc#::raw-expression-type::t
   (@class gxc#::raw-expression-type::t
           (gxc#::false::t)
           (gxc#::false::t
            gxc#::false-special-form::t
            gxc#::false-expression::t
            object::t
            t::t)
           ()
           ()
           #f
           #f
           #f
           #f
           #f
           #f))
  (declare-type
   gxc#::raw-expression-type::t
   (optimizer-resolve-class
    '(typedecl gxc#::raw-expression-type::t)
    'class::t))
  (declare-type
   gxc#::raw-expression-type?
   (@predicate gxc#::raw-expression-type::t))
  (declare-type
   gxc#make-::raw-expression-type
   (@constructor gxc#::raw-expression-type::t))
  (declare-type
   gxc#::raw-expression-type-bind-methods!
   (optimizer-resolve-class
    '(typedecl gxc#::raw-expression-type-bind-methods!)
    'promise::t))
  (declare-type
   gxc#apply-raw-expression-type
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-class
   gxc#::basic-expression-type::t
   (@class gxc#::basic-expression-type::t
           (gxc#::raw-expression-type::t gxc#::false::t)
           (gxc#::raw-expression-type::t
            gxc#::false::t
            gxc#::false-special-form::t
            gxc#::false-expression::t
            object::t
            t::t)
           ()
           ()
           #f
           #f
           #t
           #f
           #f
           #f))
  (declare-type
   gxc#::basic-expression-type::t
   (optimizer-resolve-class
    '(typedecl gxc#::basic-expression-type::t)
    'class::t))
  (declare-type
   gxc#::basic-expression-type?
   (@predicate gxc#::basic-expression-type::t))
  (declare-type
   gxc#make-::basic-expression-type
   (@constructor gxc#::basic-expression-type::t))
  (declare-type
   gxc#::basic-expression-type-bind-methods!
   (optimizer-resolve-class
    '(typedecl gxc#::basic-expression-type-bind-methods!)
    'promise::t))
  (declare-type
   gxc#apply-basic-expression-type
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-class
   gxc#::lift-top-lambdas::t
   (@class gxc#::lift-top-lambdas::t
           (gxc#::basic-xform::t)
           (gxc#::basic-xform::t
            gxc#::basic-xform-expression::t
            gxc#::identity::t
            gxc#::identity-special-form::t
            gxc#::identity-expression::t
            object::t
            t::t)
           ()
           ()
           #f
           #f
           #t
           #f
           #f
           #f))
  (declare-type
   gxc#::lift-top-lambdas::t
   (optimizer-resolve-class '(typedecl gxc#::lift-top-lambdas::t) 'class::t))
  (declare-type gxc#::lift-top-lambdas? (@predicate gxc#::lift-top-lambdas::t))
  (declare-type
   gxc#make-::lift-top-lambdas
   (@constructor gxc#::lift-top-lambdas::t))
  (declare-type
   gxc#::lift-top-lambdas-bind-methods!
   (optimizer-resolve-class
    '(typedecl gxc#::lift-top-lambdas-bind-methods!)
    'promise::t))
  (declare-type
   gxc#apply-lift-top-lambdas
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-class
   gxc#::extract-lambda-signature::t
   (@class gxc#::extract-lambda-signature::t
           (gxc#::false::t)
           (gxc#::false::t
            gxc#::false-special-form::t
            gxc#::false-expression::t
            object::t
            t::t)
           ()
           ()
           #f
           #f
           #t
           #f
           #f
           #f))
  (declare-type
   gxc#::extract-lambda-signature::t
   (optimizer-resolve-class
    '(typedecl gxc#::extract-lambda-signature::t)
    'class::t))
  (declare-type
   gxc#::extract-lambda-signature?
   (@predicate gxc#::extract-lambda-signature::t))
  (declare-type
   gxc#make-::extract-lambda-signature
   (@constructor gxc#::extract-lambda-signature::t))
  (declare-type
   gxc#::extract-lambda-signature-bind-methods!
   (optimizer-resolve-class
    '(typedecl gxc#::extract-lambda-signature-bind-methods!)
    'promise::t))
  (declare-type
   gxc#apply-extract-lambda-signature
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-top-level-type-define-values%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-top-level-decl-begin-annotation%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#eval-in-ssxi-context
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-type-define-values%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-type-begin-annotation%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-type-lambda%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-type-case-lambda%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-type-lambda-formals-tail
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-type-let-values%__%
   (@lambda 3
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-type-let-values%__0
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-type-let-values%
   (@case-lambda
    (2
     gxc#collect-type-let-values%__0
     signature:
     (return:
      t::t
      effect:
      #f
      arguments:
      #f
      unchecked:
      #f
      origin:
      gerbil/compiler/optimize-top))
    (3
     gxc#collect-type-let-values%__%
     signature:
     (return:
      t::t
      effect:
      #f
      arguments:
      #f
      unchecked:
      #f
      origin:
      gerbil/compiler/optimize-top))))
  (declare-type
   gxc#collect-type-letrec-values%__%
   (@lambda 3
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-type-letrec-values%__0
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-type-letrec-values%
   (@case-lambda
    (2
     gxc#collect-type-letrec-values%__0
     signature:
     (return:
      t::t
      effect:
      #f
      arguments:
      #f
      unchecked:
      #f
      origin:
      gerbil/compiler/optimize-top))
    (3
     gxc#collect-type-letrec-values%__%
     signature:
     (return:
      t::t
      effect:
      #f
      arguments:
      #f
      unchecked:
      #f
      origin:
      gerbil/compiler/optimize-top))))
  (declare-type
   gxc#collect-top-level-type-let-values%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-top-level-type-letrec-values%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-top-level-type-call%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#collect-type-setq%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#apply-path-type-if%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#refine-type-define-values%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#refine-type-let-values%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#refine-type-letrec-values%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#refine-type-lambda%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#refine-type-case-lambda%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-annotations
   (optimizer-resolve-class
    '(typedecl gxc#basic-expression-type-annotations)
    'HashTable::t))
  (declare-type
   gxc#basic-expression-type-begin-annotation%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-annotation-typedecl
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-annotation-mop.class
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-annotation-mop.system
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-annotation-mop.constructor
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-annotation-mop.predicate
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-annotation-mop.accessor
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-annotation-mop.mutator
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-annotation-interface
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-annotation-predicate
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-annotation-abort
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#raw-expression-type-lambda%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-lambda%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-case-lambda%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-special
   (optimizer-resolve-class
    '(typedecl gxc#basic-expression-type-special)
    'HashTable::t))
  (declare-type
   gxc#basic-expression-type-call%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#!procedure::return-type
   (@lambda 4
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#!procedure::apply-return-type
   (@lambda 4
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#!lambda::return-type
   (@lambda 4
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#!lambda::apply-return-type
   (@lambda 4
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#!case-lambda::return-type
   (@lambda 4
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#!case-lambda::apply-return-type
   (@lambda 4
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#!kw-lambda::return-type
   (@lambda 4
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#!kw-lambda::apply-return-type
   (@lambda 4
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#extract-keyword-args
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#!lambda-arity-match?
   (@lambda 2
            #f
            signature:
            (return:
             boolean::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#!lambda-arity-match-apply?
   (@lambda 2
            #f
            signature:
            (return:
             boolean::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-special-cast
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-special-apply
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-ref%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-if%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#greatest-common-type
   (@lambda 3
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#basic-expression-type-quote%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#dispatch-lambda-form?
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#dispatch-lambda-form-delegate
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#lambda-form-arity
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#lambda-form-infer-signature
   (@lambda 1
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#extract-lambda-signature-begin-annotation%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#lambda-expr?
   (@lambda 1
            #f
            signature:
            (return:
             boolean::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#case-lambda-expr?
   (@lambda 1
            #f
            signature:
            (return:
             boolean::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#opt-lambda-expr?
   (@lambda 1
            #f
            signature:
            (return:
             boolean::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#kw-lambda-expr?
   (@lambda 1
            #f
            signature:
            (return:
             boolean::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#lift-case-lambda-clauses__%
   (@lambda 4
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#lift-case-lambda-clauses__0
   (@lambda 3
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#lift-case-lambda-clauses
   (@case-lambda
    (3
     gxc#lift-case-lambda-clauses__0
     signature:
     (return:
      t::t
      effect:
      #f
      arguments:
      #f
      unchecked:
      #f
      origin:
      gerbil/compiler/optimize-top))
    (4
     gxc#lift-case-lambda-clauses__%
     signature:
     (return:
      t::t
      effect:
      #f
      arguments:
      #f
      unchecked:
      #f
      origin:
      gerbil/compiler/optimize-top))))
  (declare-type
   gxc#lift-top-lambda-define-values%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#lift-top-lambda-let-values%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#lift-top-lambda-letrec-values%
   (@lambda 2
            #f
            signature:
            (return:
             t::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top)))
  (declare-type
   gxc#lift-top-lambda-binding?
   (@lambda 1
            #f
            signature:
            (return:
             boolean::t
             effect:
             #f
             arguments:
             #f
             unchecked:
             #f
             origin:
             gerbil/compiler/optimize-top))))
