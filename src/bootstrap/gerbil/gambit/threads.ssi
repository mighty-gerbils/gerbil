prelude: :gerbil/core
package: gerbil/gambit
namespace: gerbil/gambit/threads

(%#begin (%#export #t)
         (%#extern
          (current-thread current-thread)
          (thread? thread?)
          (make-thread make-thread)
          (make-root-thread make-root-thread)
          (thread-name thread-name)
          (thread-specific thread-specific)
          (thread-specific-set! thread-specific-set!)
          (thread-base-priority thread-base-priority)
          (thread-base-priority-set! thread-base-priority-set!)
          (thread-priority-boost thread-priority-boost)
          (thread-priority-boost-set! thread-priority-boost-set!)
          (thread-quantum thread-quantum)
          (thread-quantum-set! thread-quantum-set!)
          (thread-start! thread-start!)
          (thread-yield! thread-yield!)
          (thread-sleep! thread-sleep!)
          (thread-terminate! thread-terminate!)
          (thread-join! thread-join!)
          (thread-send thread-send)
          (thread-receive thread-receive)
          (thread-mailbox-next thread-mailbox-next)
          (thread-mailbox-rewind thread-mailbox-rewind)
          (thread-mailbox-extract-and-rewind thread-mailbox-extract-and-rewind)
          (mutex? mutex?)
          (make-mutex make-mutex)
          (mutex-name mutex-name)
          (mutex-specific mutex-specific)
          (mutex-specific-set! mutex-specific-set!)
          (mutex-state mutex-state)
          (mutex-lock! mutex-lock!)
          (mutex-unlock! mutex-unlock!)
          (condition-variable? condition-variable?)
          (make-condition-variable make-condition-variable)
          (condition-variable-name condition-variable-name)
          (condition-variable-specific condition-variable-specific)
          (condition-variable-specific-set! condition-variable-specific-set!)
          (condition-variable-signal! condition-variable-signal!)
          (condition-variable-broadcast! condition-variable-broadcast!)
          (make-thread-group make-thread-group)
          (thread-group? thread-group?)
          (thread-group-name thread-group-name)
          (thread-group-specific thread-group-specific)
          (thread-group-specific-set! thread-group-specific-set!)
          (thread-group-parent thread-group-parent)
          (thread-group-resume! thread-group-resume!)
          (thread-group-suspend! thread-group-suspend!)
          (thread-group-terminate! thread-group-terminate!)
          (thread-group->thread-group-list thread-group->thread-group-list)
          (thread-group->thread-group-vector thread-group->thread-group-vector)
          (thread-group->thread-list thread-group->thread-list)
          (thread-group->thread-vector thread-group->thread-vector)
          (thread-state thread-state)
          (thread-state-uninitialized? thread-state-uninitialized?)
          (thread-state-initialized? thread-state-initialized?)
          (thread-state-running? thread-state-running?)
          (thread-state-running-processor thread-state-running-processor)
          (thread-state-waiting? thread-state-waiting?)
          (thread-state-waiting-for thread-state-waiting-for)
          (thread-state-waiting-timeout thread-state-waiting-timeout)
          (thread-state-normally-terminated? thread-state-normally-terminated?)
          (thread-state-normally-terminated-result
           thread-state-normally-terminated-result)
          (thread-state-abnormally-terminated?
           thread-state-abnormally-terminated?)
          (thread-state-abnormally-terminated-reason
           thread-state-abnormally-terminated-reason)
          (top top)
          (thread-interrupt! thread-interrupt!)
          (thread-suspend! thread-suspend!)
          (thread-resume! thread-resume!)
          (thread-thread-group thread-thread-group)
          (thread-init! thread-init!)
          (processor? processor?)
          (current-processor current-processor)
          (processor-id processor-id)))
