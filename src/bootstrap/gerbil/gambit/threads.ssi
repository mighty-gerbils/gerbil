prelude: :gerbil/core
package: gerbil/gambit
namespace: gerbil/gambit/threads

(%#begin (%#export
          (spec:
           0
           thread-state-running-processor
           thread-state-running-processor)
          (spec: 0 *primordial-thread-locals* *primordial-thread-locals*)
          (spec: 0 thread-group-suspend! thread-group-suspend!)
          (spec: 0 mutex-specific mutex-specific)
          (spec: 0 thread-resume! thread-resume!)
          (spec: 0 thread-local-ref thread-local-ref)
          (spec: 0 make-thread make-thread)
          (spec: 0 with-exception-stack-trace with-exception-stack-trace)
          (spec: 0 thread-receive thread-receive)
          (spec: 0 thread-group-specific-set! thread-group-specific-set!)
          (spec: 0 mutex-unlock! mutex-unlock!)
          (spec:
           0
           unhandled-actor-exception-hook-set!
           unhandled-actor-exception-hook-set!)
          (spec:
           0
           unhandled-actor-exception-hook
           unhandled-actor-exception-hook)
          (spec: 0 thread-sleep! thread-sleep!)
          (spec: 0 thread-group? thread-group?)
          (spec: 0 mutex-state mutex-state)
          (spec: 0 make-mutex make-mutex)
          (spec: 0 thread-state-running? thread-state-running?)
          (spec: 0 thread-send thread-send)
          (spec: 0 thread-group-terminate! thread-group-terminate!)
          (spec: 0 thread? thread?)
          (spec: 0 thread-priority-boost-set! thread-priority-boost-set!)
          (spec: 0 thread-group-parent thread-group-parent)
          (spec: 0 dump-stack-trace! dump-stack-trace!)
          (spec: 0 thread-yield! thread-yield!)
          (spec: 0 thread-state-initialized? thread-state-initialized?)
          (spec: 0 spawn/group spawn/group)
          (spec: 0 thread-priority-boost thread-priority-boost)
          (spec: 0 mutex-name mutex-name)
          (spec: 0 thread-group-name thread-group-name)
          (spec:
           0
           thread-state-normally-terminated?
           thread-state-normally-terminated?)
          (spec: 0 thread-quantum-set! thread-quantum-set!)
          (spec: 0 thread-group-specific thread-group-specific)
          (spec: 0 mutex-lock! mutex-lock!)
          (spec: 0 condition-variable? condition-variable?)
          (spec: 0 top top)
          (spec: 0 thread-group-resume! thread-group-resume!)
          (spec:
           0
           thread-state-normally-terminated-result
           thread-state-normally-terminated-result)
          (spec: 0 thread-quantum thread-quantum)
          (spec: 0 actor-thread-locals-set! actor-thread-locals-set!)
          (spec: 0 make-root-thread make-root-thread)
          (spec:
           0
           condition-variable-specific-set!
           condition-variable-specific-set!)
          (spec: 0 with-lock with-lock)
          (spec: 0 thread-suspend! thread-suspend!)
          (spec:
           0
           thread-group->thread-group-vector
           thread-group->thread-group-vector)
          (spec:
           0
           thread-state-abnormally-terminated-reason
           thread-state-abnormally-terminated-reason)
          (spec: 0 thread-mailbox-next thread-mailbox-next)
          (spec: 0 thread-local-table thread-local-table)
          (spec: 0 processor? processor?)
          (spec: 0 thread-local-clear! thread-local-clear!)
          (spec: 0 thread-state-waiting? thread-state-waiting?)
          (spec:
           0
           thread-group->thread-group-list
           thread-group->thread-group-list)
          (spec:
           0
           thread-mailbox-extract-and-rewind
           thread-mailbox-extract-and-rewind)
          (spec: 0 spawn-actor spawn-actor)
          (spec: 0 processor-id processor-id)
          (spec: 0 make-condition-variable make-condition-variable)
          (spec: 0 thread-thread-group thread-thread-group)
          (spec: 0 thread-group->thread-vector thread-group->thread-vector)
          (spec: 0 with-dynamic-lock with-dynamic-lock)
          (spec: 0 thread-name thread-name)
          (spec: 0 spawn spawn)
          (spec: 0 spawn/name spawn/name)
          (spec: 0 condition-variable-name condition-variable-name)
          (spec: 0 actor-thread-locals actor-thread-locals)
          (spec: 0 thread-terminate! thread-terminate!)
          (spec: 0 thread-group->thread-list thread-group->thread-list)
          (spec:
           0
           thread-state-abnormally-terminated?
           thread-state-abnormally-terminated?)
          (spec: 0 thread-mailbox-rewind thread-mailbox-rewind)
          (spec: 0 current-processor current-processor)
          (spec: 0 spawn-thread spawn-thread)
          (spec: 0 condition-variable-broadcast! condition-variable-broadcast!)
          (spec: 0 thread-base-priority-set! thread-base-priority-set!)
          (spec: 0 thread-specific-set! thread-specific-set!)
          (spec: 0 mutex? mutex?)
          (spec: 0 current-thread current-thread)
          (spec: 0 thread-init! thread-init!)
          (spec: 0 condition-variable-specific condition-variable-specific)
          (spec: 0 actor-thread? actor-thread?)
          (spec: 0 thread-state-uninitialized? thread-state-uninitialized?)
          (spec: 0 thread-base-priority thread-base-priority)
          (spec: 0 thread-specific thread-specific)
          (spec: 0 thread-local-get thread-local-get)
          (spec: 0 condition-variable-signal! condition-variable-signal!)
          (spec: 0 thread-state-waiting-timeout thread-state-waiting-timeout)
          (spec: 0 thread-join! thread-join!)
          (spec: 0 thread-state thread-state)
          (spec: 0 thread-local-set! thread-local-set!)
          (spec: 0 thread-state-waiting-for thread-state-waiting-for)
          (spec: 0 thread-start! thread-start!)
          (spec: 0 mutex-specific-set! mutex-specific-set!)
          (spec: 0 thread-interrupt! thread-interrupt!)
          (spec: 0 current-thread-group current-thread-group)
          (spec: 0 make-thread-group make-thread-group))
         (%#extern
          (current-thread current-thread)
          (thread? thread?)
          (make-thread make-thread)
          (make-root-thread make-root-thread)
          (thread-name thread-name)
          (thread-specific thread-specific)
          (thread-specific-set! thread-specific-set!)
          (thread-base-priority thread-base-priority)
          (thread-base-priority-set! thread-base-priority-set!)
          (thread-priority-boost thread-priority-boost)
          (thread-priority-boost-set! thread-priority-boost-set!)
          (thread-quantum thread-quantum)
          (thread-quantum-set! thread-quantum-set!)
          (thread-start! thread-start!)
          (thread-yield! thread-yield!)
          (thread-sleep! thread-sleep!)
          (thread-terminate! thread-terminate!)
          (thread-join! thread-join!)
          (thread-send thread-send)
          (thread-receive thread-receive)
          (thread-mailbox-next thread-mailbox-next)
          (thread-mailbox-rewind thread-mailbox-rewind)
          (thread-mailbox-extract-and-rewind thread-mailbox-extract-and-rewind)
          (mutex? mutex?)
          (make-mutex make-mutex)
          (mutex-name mutex-name)
          (mutex-specific mutex-specific)
          (mutex-specific-set! mutex-specific-set!)
          (mutex-state mutex-state)
          (mutex-lock! mutex-lock!)
          (mutex-unlock! mutex-unlock!)
          (condition-variable? condition-variable?)
          (make-condition-variable make-condition-variable)
          (condition-variable-name condition-variable-name)
          (condition-variable-specific condition-variable-specific)
          (condition-variable-specific-set! condition-variable-specific-set!)
          (condition-variable-signal! condition-variable-signal!)
          (condition-variable-broadcast! condition-variable-broadcast!)
          (make-thread-group make-thread-group)
          (thread-group? thread-group?)
          (thread-group-name thread-group-name)
          (thread-group-specific thread-group-specific)
          (thread-group-specific-set! thread-group-specific-set!)
          (thread-group-parent thread-group-parent)
          (thread-group-resume! thread-group-resume!)
          (thread-group-suspend! thread-group-suspend!)
          (thread-group-terminate! thread-group-terminate!)
          (thread-group->thread-group-list thread-group->thread-group-list)
          (thread-group->thread-group-vector thread-group->thread-group-vector)
          (thread-group->thread-list thread-group->thread-list)
          (thread-group->thread-vector thread-group->thread-vector)
          (thread-state thread-state)
          (thread-state-uninitialized? thread-state-uninitialized?)
          (thread-state-initialized? thread-state-initialized?)
          (thread-state-running? thread-state-running?)
          (thread-state-running-processor thread-state-running-processor)
          (thread-state-waiting? thread-state-waiting?)
          (thread-state-waiting-for thread-state-waiting-for)
          (thread-state-waiting-timeout thread-state-waiting-timeout)
          (thread-state-normally-terminated? thread-state-normally-terminated?)
          (thread-state-normally-terminated-result
           thread-state-normally-terminated-result)
          (thread-state-abnormally-terminated?
           thread-state-abnormally-terminated?)
          (thread-state-abnormally-terminated-reason
           thread-state-abnormally-terminated-reason)
          (top top)
          (thread-interrupt! thread-interrupt!)
          (thread-suspend! thread-suspend!)
          (thread-resume! thread-resume!)
          (thread-thread-group thread-thread-group)
          (thread-init! thread-init!)
          (processor? processor?)
          (current-processor current-processor)
          (processor-id processor-id))
         (%#define-runtime spawn gerbil/gambit/threads#spawn)
         (%#define-runtime spawn/name gerbil/gambit/threads#spawn/name)
         (%#define-runtime spawn/group gerbil/gambit/threads#spawn/group)
         (%#define-runtime spawn-actor gerbil/gambit/threads#spawn-actor)
         (%#extern
          (actor-thread? gerbil/gambit/threads#actor-thread?)
          (construct-actor-thread gerbil/gambit/threads#construct-actor-thread)
          (actor-thread-locals gerbil/gambit/threads#actor-thread-locals)
          (actor-thread-locals-set!
           gerbil/gambit/threads#actor-thread-locals-set!))
         (%#define-runtime spawn-thread gerbil/gambit/threads#spawn-thread)
         (%#define-runtime
          thread-local-ref
          gerbil/gambit/threads#thread-local-ref)
         (%#define-runtime
          thread-local-get
          gerbil/gambit/threads#thread-local-get)
         (%#define-runtime
          thread-local-set!
          gerbil/gambit/threads#thread-local-set!)
         (%#define-runtime
          thread-local-clear!
          gerbil/gambit/threads#thread-local-clear!)
         (%#define-runtime
          thread-local-table
          gerbil/gambit/threads#thread-local-table)
         (%#define-runtime
          *primordial-thread-locals*
          gerbil/gambit/threads#*primordial-thread-locals*)
         (%#define-runtime
          *thread-locals*
          gerbil/gambit/threads#*thread-locals*)
         (%#define-runtime
          *thread-locals-mutex*
          gerbil/gambit/threads#*thread-locals-mutex*)
         (%#define-runtime
          unhandled-actor-exception-hook
          gerbil/gambit/threads#unhandled-actor-exception-hook)
         (%#define-runtime
          unhandled-actor-exception-hook-set!
          gerbil/gambit/threads#unhandled-actor-exception-hook-set!)
         (%#define-runtime
          with-exception-stack-trace
          gerbil/gambit/threads#with-exception-stack-trace)
         (%#extern (dump-stack-trace! gerbil/gambit/threads#dump-stack-trace!))
         (%#define-runtime
          current-thread-group
          gerbil/gambit/threads#current-thread-group)
         (%#define-runtime with-lock gerbil/gambit/threads#with-lock)
         (%#define-runtime
          with-dynamic-lock
          gerbil/gambit/threads#with-dynamic-lock))
(%#call (%#ref _gx#load-module) (%#quote "gerbil/gambit/threads__0"))
