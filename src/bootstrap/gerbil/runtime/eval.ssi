prelude: :gerbil/core
package: gerbil/runtime
namespace: #f

(%#begin (%#export #t)
         (%#import
          :gerbil/runtime/gambit
          :gerbil/runtime/util
          :gerbil/runtime/mop
          :gerbil/runtime/error
          :gerbil/runtime/hash
          :gerbil/runtime/syntax)
         (%#define-runtime __syntax::t __syntax::t)
         (%#define-runtime __syntax? __syntax?)
         (%#define-runtime make-__syntax make-__syntax)
         (%#define-runtime __syntax-e __syntax-e)
         (%#define-runtime __syntax-id __syntax-id)
         (%#define-runtime __syntax-e-set! __syntax-e-set!)
         (%#define-runtime __syntax-id-set! __syntax-id-set!)
         (%#define-runtime &__syntax-e &__syntax-e)
         (%#define-runtime &__syntax-id &__syntax-id)
         (%#define-runtime &__syntax-e-set! &__syntax-e-set!)
         (%#define-runtime &__syntax-id-set! &__syntax-id-set!)
         (%#begin (%#begin-syntax
                   (%#call (%#ref load-module)
                           (%#quote "gerbil/runtime/eval~1")))
                  (%#define-syntax __syntax |[:0:]#__syntax|))
         (%#define-runtime __core-form::t __core-form::t)
         (%#define-runtime __core-form? __core-form?)
         (%#define-runtime make-__core-form make-__core-form)
         (%#define-runtime __core-form-e __core-form-e)
         (%#define-runtime __core-form-id __core-form-id)
         (%#define-runtime __core-form-e-set! __core-form-e-set!)
         (%#define-runtime __core-form-id-set! __core-form-id-set!)
         (%#define-runtime &__core-form-e &__core-form-e)
         (%#define-runtime &__core-form-id &__core-form-id)
         (%#define-runtime &__core-form-e-set! &__core-form-e-set!)
         (%#define-runtime &__core-form-id-set! &__core-form-id-set!)
         (%#define-syntax __core-form |[:0:]#__core-form|)
         (%#define-runtime __core-expression::t __core-expression::t)
         (%#define-runtime __core-expression? __core-expression?)
         (%#define-runtime make-__core-expression make-__core-expression)
         (%#define-runtime __core-expression-e __core-expression-e)
         (%#define-runtime __core-expression-id __core-expression-id)
         (%#define-runtime __core-expression-e-set! __core-expression-e-set!)
         (%#define-runtime __core-expression-id-set! __core-expression-id-set!)
         (%#define-runtime &__core-expression-e &__core-expression-e)
         (%#define-runtime &__core-expression-id &__core-expression-id)
         (%#define-runtime &__core-expression-e-set! &__core-expression-e-set!)
         (%#define-runtime
          &__core-expression-id-set!
          &__core-expression-id-set!)
         (%#define-syntax __core-expression |[:0:]#__core-expression|)
         (%#define-runtime __core-special-form::t __core-special-form::t)
         (%#define-runtime __core-special-form? __core-special-form?)
         (%#define-runtime make-__core-special-form make-__core-special-form)
         (%#define-runtime __core-special-form-e __core-special-form-e)
         (%#define-runtime __core-special-form-id __core-special-form-id)
         (%#define-runtime
          __core-special-form-e-set!
          __core-special-form-e-set!)
         (%#define-runtime
          __core-special-form-id-set!
          __core-special-form-id-set!)
         (%#define-runtime &__core-special-form-e &__core-special-form-e)
         (%#define-runtime &__core-special-form-id &__core-special-form-id)
         (%#define-runtime
          &__core-special-form-e-set!
          &__core-special-form-e-set!)
         (%#define-runtime
          &__core-special-form-id-set!
          &__core-special-form-id-set!)
         (%#define-syntax __core-special-form |[:0:]#__core-special-form|)
         (%#define-runtime __core __core)
         (%#define-runtime __current-expander __current-expander)
         (%#define-runtime __current-compiler __current-compiler)
         (%#define-runtime __current-path __current-path)
         (%#define-runtime __core-resolve __core-resolve)
         (%#begin (%#define-runtime __core-bound-id?__% __core-bound-id?__%)
                  (%#begin (%#define-runtime
                            __core-bound-id?__0
                            __core-bound-id?__0)
                           (%#define-runtime
                            __core-bound-id?
                            __core-bound-id?)))
         (%#begin (%#define-runtime
                   __core-bind-syntax!__%
                   __core-bind-syntax!__%)
                  (%#begin (%#define-runtime
                            __core-bind-syntax!__0
                            __core-bind-syntax!__0)
                           (%#define-runtime
                            __core-bind-syntax!
                            __core-bind-syntax!)))
         (%#begin (%#define-runtime __SRC__% __SRC__%)
                  (%#begin (%#define-runtime __SRC__0 __SRC__0)
                           (%#define-runtime __SRC __SRC)))
         (%#define-runtime __locat __locat)
         (%#define-runtime __check-values __check-values)
         (%#define-runtime __compile __compile)
         (%#begin (%#define-runtime __compile-error__% __compile-error__%)
                  (%#begin (%#define-runtime
                            __compile-error__0
                            __compile-error__0)
                           (%#define-runtime __compile-error __compile-error)))
         (%#define-runtime __compile-ignore% __compile-ignore%)
         (%#define-runtime __compile-begin% __compile-begin%)
         (%#define-runtime __compile-begin-foreign% __compile-begin-foreign%)
         (%#define-runtime __compile-import% __compile-import%)
         (%#define-runtime
          __compile-begin-annotation%
          __compile-begin-annotation%)
         (%#define-runtime __compile-define-values% __compile-define-values%)
         (%#define-runtime __compile-head-id __compile-head-id)
         (%#define-runtime __compile-lambda-head __compile-lambda-head)
         (%#define-runtime __compile-lambda% __compile-lambda%)
         (%#define-runtime __compile-case-lambda% __compile-case-lambda%)
         (%#define-runtime __compile-let-form __compile-let-form)
         (%#define-runtime __compile-let-values% __compile-let-values%)
         (%#define-runtime __compile-letrec-values% __compile-letrec-values%)
         (%#define-runtime __compile-letrec*-values% __compile-letrec*-values%)
         (%#define-runtime __compile-call% __compile-call%)
         (%#define-runtime __compile-ref% __compile-ref%)
         (%#define-runtime __compile-setq% __compile-setq%)
         (%#define-runtime __compile-if% __compile-if%)
         (%#define-runtime __compile-quote% __compile-quote%)
         (%#define-runtime __compile-quote-syntax% __compile-quote-syntax%)
         (%#define-syntax defcore-forms |[:0:]#defcore-forms|))
(%#call (%#ref load-module) (%#quote "gerbil/runtime/eval~0"))
