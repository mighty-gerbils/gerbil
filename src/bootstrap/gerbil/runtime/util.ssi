prelude: :gerbil/core
package: gerbil/runtime
namespace: #f

(%#begin (%#import :gerbil/runtime/gambit)
         (%#export #t)
         (%#define-runtime displayln displayln)
         (%#define-runtime display* display*)
         (%#define-runtime file-newer? file-newer?)
         (%#define-runtime create-directory* create-directory*)
         (%#define-runtime absent-obj absent-obj)
         (%#define-runtime absent-value absent-value)
         (%#define-runtime true true)
         (%#define-runtime true? true?)
         (%#define-runtime false false)
         (%#define-runtime void void)
         (%#define-runtime void? void?)
         (%#define-runtime eof-object eof-object)
         (%#define-runtime identity identity)
         (%#define-runtime dssl-object? dssl-object?)
         (%#define-runtime dssl-key-object? dssl-key-object?)
         (%#define-runtime dssl-rest-object? dssl-rest-object?)
         (%#define-runtime dssl-optional-object? dssl-optional-object?)
         (%#define-runtime immediate? immediate?)
         (%#define-runtime nonnegative-fixnum? nonnegative-fixnum?)
         (%#define-runtime values-count values-count)
         (%#define-runtime values-ref values-ref)
         (%#define-runtime values->list values->list)
         (%#define-runtime subvector->list subvector->list)
         (%#define-runtime make-hash-table make-hash-table)
         (%#define-runtime make-hash-table-eq make-hash-table-eq)
         (%#define-runtime make-hash-table-eqv make-hash-table-eqv)
         (%#define-runtime list->hash-table list->hash-table)
         (%#define-runtime list->hash-table-eq list->hash-table-eq)
         (%#define-runtime list->hash-table-eqv list->hash-table-eqv)
         (%#define-runtime hash? hash?)
         (%#define-runtime hash-table? hash-table?)
         (%#define-runtime hash-length hash-length)
         (%#define-runtime hash-ref hash-ref)
         (%#define-runtime hash-get hash-get)
         (%#define-runtime hash-put! hash-put!)
         (%#define-runtime hash-update! hash-update!)
         (%#define-runtime hash-remove! hash-remove!)
         (%#define-runtime hash->list hash->list)
         (%#define-runtime hash->plist hash->plist)
         (%#define-runtime plist->hash-table plist->hash-table)
         (%#define-runtime plist->hash-table-eq plist->hash-table-eq)
         (%#define-runtime plist->hash-table-eqv plist->hash-table-eqv)
         (%#define-runtime hash-key? hash-key?)
         (%#define-runtime hash-for-each hash-for-each)
         (%#define-runtime hash-map hash-map)
         (%#define-runtime hash-fold hash-fold)
         (%#define-runtime hash-find hash-find)
         (%#define-runtime hash-keys hash-keys)
         (%#define-runtime hash-values hash-values)
         (%#define-runtime hash-copy hash-copy)
         (%#define-runtime hash-copy! hash-copy!)
         (%#define-runtime hash-merge hash-merge)
         (%#define-runtime hash-merge! hash-merge!)
         (%#define-runtime hash-clear! hash-clear!)
         (%#define-runtime make-list make-list)
         (%#define-runtime cons* cons*)
         (%#define-runtime foldl1 foldl1)
         (%#define-runtime foldl2 foldl2)
         (%#define-runtime foldl foldl)
         (%#define-runtime foldl* foldl*)
         (%#define-runtime foldr1 foldr1)
         (%#define-runtime foldr2 foldr2)
         (%#define-runtime foldr foldr)
         (%#define-runtime foldr* foldr*)
         (%#define-runtime andmap1 andmap1)
         (%#define-runtime andmap2 andmap2)
         (%#define-runtime andmap andmap)
         (%#define-runtime andmap* andmap*)
         (%#define-runtime ormap1 ormap1)
         (%#define-runtime ormap2 ormap2)
         (%#define-runtime ormap ormap)
         (%#define-runtime ormap* ormap*)
         (%#define-runtime filter filter)
         (%#define-runtime filter-map1 filter-map1)
         (%#define-runtime filter-map2 filter-map2)
         (%#define-runtime filter-map filter-map)
         (%#define-runtime filter-map* filter-map*)
         (%#define-runtime iota iota)
         (%#define-runtime last-pair last-pair)
         (%#define-runtime last last)
         (%#begin (%#begin-syntax
                   (%#call (%#ref load-module)
                           (%#quote "gerbil/runtime/util__1")))
                  (%#define-syntax defassget |[:0:]#defassget|))
         (%#define-runtime assgetq assgetq)
         (%#define-runtime assgetv assgetv)
         (%#define-runtime assget assget)
         (%#define-syntax defpget |[:0:]#defpget|)
         (%#define-runtime pgetq pgetq)
         (%#define-runtime pgetv pgetv)
         (%#define-runtime pget pget)
         (%#define-runtime find find)
         (%#define-runtime memf memf)
         (%#define-syntax defremove1 |[:0:]#defremove1|)
         (%#define-runtime remove1 remove1)
         (%#define-runtime remv remv)
         (%#define-runtime remq remq)
         (%#define-runtime remf remf)
         (%#define-runtime 1+ 1+)
         (%#define-runtime 1- 1-)
         (%#define-runtime fx1+ fx1+)
         (%#define-runtime fx1- fx1-)
         (%#define-runtime fxshift fxshift)
         (%#define-runtime fx/ fx/)
         (%#define-runtime interned-symbol? interned-symbol?)
         (%#define-runtime make-symbol make-symbol)
         (%#define-runtime interned-keyword? interned-keyword?)
         (%#define-runtime symbol->keyword symbol->keyword)
         (%#define-runtime keyword->symbol keyword->symbol)
         (%#define-runtime bytes->string bytes->string)
         (%#define-runtime string->bytes string->bytes)
         (%#define-runtime substring->bytes substring->bytes)
         (%#define-runtime string-empty? string-empty?)
         (%#define-runtime string-prefix? string-prefix?)
         (%#define-runtime string-index string-index)
         (%#define-runtime string-rindex string-rindex)
         (%#define-runtime string-split string-split)
         (%#define-runtime string-join string-join))
(%#call (%#ref load-module) (%#quote "gerbil/runtime/util__0"))
