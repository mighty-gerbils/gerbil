prelude: :gerbil/core
package: gerbil/runtime
namespace: #f

(%#begin (%#import :gerbil/runtime/gambit)
         (%#export #t)
         (%#begin (%#begin-syntax
                   (%#call (%#ref load-module)
                           (%#quote "gerbil/runtime/util~1")))
                  (%#define-syntax __lock-inline! |[:0:]#__lock-inline!|))
         (%#define-syntax __unlock-inline! |[:0:]#__unlock-inline!|)
         (%#define-syntax __make-inline-lock |[:0:]#__make-inline-lock|)
         (%#define-runtime displayln displayln)
         (%#define-runtime display* display*)
         (%#define-runtime file-newer? file-newer?)
         (%#begin (%#define-runtime create-directory*__% create-directory*__%)
                  (%#begin (%#define-runtime
                            create-directory*__0
                            create-directory*__0)
                           (%#define-runtime
                            create-directory*
                            create-directory*)))
         (%#define-runtime absent-obj absent-obj)
         (%#define-runtime absent-value absent-value)
         (%#define-runtime true true)
         (%#define-runtime true? true?)
         (%#define-runtime false false)
         (%#define-runtime void void)
         (%#define-runtime void? void?)
         (%#define-runtime dssl-object? dssl-object?)
         (%#define-runtime dssl-key-object? dssl-key-object?)
         (%#define-runtime dssl-rest-object? dssl-rest-object?)
         (%#define-runtime dssl-optional-object? dssl-optional-object?)
         (%#define-runtime immediate? immediate?)
         (%#define-runtime nonnegative-fixnum? nonnegative-fixnum?)
         (%#define-runtime values-count values-count)
         (%#define-runtime values-ref values-ref)
         (%#define-runtime values->list values->list)
         (%#begin (%#define-runtime subvector->list__% subvector->list__%)
                  (%#begin (%#define-runtime
                            subvector->list__0
                            subvector->list__0)
                           (%#define-runtime subvector->list subvector->list)))
         (%#define-runtime cons* cons*)
         (%#define-runtime foldl1 foldl1)
         (%#define-runtime foldl2 foldl2)
         (%#define-runtime foldl foldl)
         (%#define-runtime foldl* foldl*)
         (%#define-runtime foldr1 foldr1)
         (%#define-runtime foldr2 foldr2)
         (%#define-runtime foldr foldr)
         (%#define-runtime foldr* foldr*)
         (%#define-runtime remove-nulls! remove-nulls!)
         (%#define-runtime append1! append1!)
         (%#define-runtime append-reverse-until append-reverse-until)
         (%#define-runtime andmap1 andmap1)
         (%#define-runtime andmap2 andmap2)
         (%#define-runtime andmap andmap)
         (%#define-runtime andmap* andmap*)
         (%#define-runtime ormap1 ormap1)
         (%#define-runtime ormap2 ormap2)
         (%#define-runtime ormap ormap)
         (%#define-runtime ormap* ormap*)
         (%#define-runtime filter-map1 filter-map1)
         (%#define-runtime filter-map2 filter-map2)
         (%#define-runtime filter-map filter-map)
         (%#define-runtime filter-map* filter-map*)
         (%#define-syntax defassget |[:0:]#defassget|)
         (%#begin (%#define-runtime assgetq__% assgetq__%)
                  (%#begin (%#define-runtime assgetq__0 assgetq__0)
                           (%#define-runtime assgetq assgetq)))
         (%#begin (%#define-runtime assgetv__% assgetv__%)
                  (%#begin (%#define-runtime assgetv__0 assgetv__0)
                           (%#define-runtime assgetv assgetv)))
         (%#begin (%#define-runtime assget__% assget__%)
                  (%#begin (%#define-runtime assget__0 assget__0)
                           (%#define-runtime assget assget)))
         (%#define-syntax defpget |[:0:]#defpget|)
         (%#begin (%#define-runtime pgetq__% pgetq__%)
                  (%#begin (%#define-runtime pgetq__0 pgetq__0)
                           (%#define-runtime pgetq pgetq)))
         (%#begin (%#define-runtime pgetv__% pgetv__%)
                  (%#begin (%#define-runtime pgetv__0 pgetv__0)
                           (%#define-runtime pgetv pgetv)))
         (%#begin (%#define-runtime pget__% pget__%)
                  (%#begin (%#define-runtime pget__0 pget__0)
                           (%#define-runtime pget pget)))
         (%#define-runtime find find)
         (%#define-runtime memf memf)
         (%#define-syntax defremove1 |[:0:]#defremove1|)
         (%#define-runtime remove1 remove1)
         (%#define-runtime remv remv)
         (%#define-runtime remq remq)
         (%#define-runtime remf remf)
         (%#define-runtime 1+ 1+)
         (%#define-runtime 1- 1-)
         (%#define-runtime fx1+ fx1+)
         (%#define-runtime fx1- fx1-)
         (%#define-runtime fxshift fxshift)
         (%#define-runtime fx/ fx/)
         (%#define-runtime fx>=0? fx>=0?)
         (%#define-runtime fx>0? fx>0?)
         (%#define-runtime fx=0? fx=0?)
         (%#define-runtime fx<0? fx<0?)
         (%#define-runtime fx<=0? fx<=0?)
         (%#define-runtime interned-symbol? interned-symbol?)
         (%#define-runtime display-as-string display-as-string)
         (%#begin (%#define-runtime as-string__0 as-string__0)
                  (%#define-runtime as-string__1 as-string__1)
                  (%#define-runtime as-string as-string))
         (%#begin (%#define-runtime make-symbol__0 make-symbol__0)
                  (%#define-runtime make-symbol__1 make-symbol__1)
                  (%#define-runtime make-symbol make-symbol))
         (%#begin (%#define-runtime make-keyword__0 make-keyword__0)
                  (%#define-runtime make-keyword__1 make-keyword__1)
                  (%#define-runtime make-keyword make-keyword))
         (%#define-runtime interned-keyword? interned-keyword?)
         (%#define-runtime symbol->keyword symbol->keyword)
         (%#define-runtime keyword->symbol keyword->symbol)
         (%#begin (%#define-runtime bytes->string__% bytes->string__%)
                  (%#begin (%#define-runtime bytes->string__0 bytes->string__0)
                           (%#define-runtime bytes->string bytes->string)))
         (%#begin (%#define-runtime string->bytes__% string->bytes__%)
                  (%#begin (%#define-runtime string->bytes__0 string->bytes__0)
                           (%#define-runtime string->bytes string->bytes)))
         (%#begin (%#define-runtime substring->bytes__% substring->bytes__%)
                  (%#begin (%#define-runtime
                            substring->bytes__0
                            substring->bytes__0)
                           (%#define-runtime
                            substring->bytes
                            substring->bytes)))
         (%#define-runtime string-empty? string-empty?)
         (%#define-runtime string-prefix? string-prefix?)
         (%#begin (%#define-runtime string-index__% string-index__%)
                  (%#begin (%#define-runtime string-index__0 string-index__0)
                           (%#define-runtime string-index string-index)))
         (%#begin (%#define-runtime string-rindex__% string-rindex__%)
                  (%#begin (%#define-runtime string-rindex__0 string-rindex__0)
                           (%#define-runtime string-rindex string-rindex)))
         (%#define-runtime string-split string-split)
         (%#define-runtime string-join string-join)
         (%#define-runtime read-u8vector read-u8vector)
         (%#define-runtime write-u8vector write-u8vector)
         (%#define-runtime read-string read-string)
         (%#define-runtime write-string write-string)
         (%#define-syntax DBG |[:0:]#DBG|)
         (%#define-syntax DBG/1 |[:0:]#DBG/1|)
         (%#define-runtime DBG-printer DBG-printer)
         (%#define-runtime DBG-helper DBG-helper))
(%#call (%#ref load-module) (%#quote "gerbil/runtime/util~0"))
