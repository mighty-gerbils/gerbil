prelude: :gerbil/core
package: gerbil/expander
namespace: gx

(%#begin (%#import :gerbil/expander/common)
         (%#export #t)
         (%#define-runtime identifier-wrap::t gx#identifier-wrap::t)
         (%#define-runtime identifier-wrap? gx#identifier-wrap?)
         (%#define-runtime make-identifier-wrap gx#make-identifier-wrap)
         (%#define-runtime identifier-wrap-marks gx#identifier-wrap-marks)
         (%#define-runtime identifier-wrap-e gx#identifier-wrap-e)
         (%#define-runtime identifier-wrap-source gx#identifier-wrap-source)
         (%#define-runtime
          identifier-wrap-marks-set!
          gx#identifier-wrap-marks-set!)
         (%#define-runtime identifier-wrap-e-set! gx#identifier-wrap-e-set!)
         (%#define-runtime
          identifier-wrap-source-set!
          gx#identifier-wrap-source-set!)
         (%#define-runtime &identifier-wrap-marks gx#&identifier-wrap-marks)
         (%#define-runtime &identifier-wrap-e gx#&identifier-wrap-e)
         (%#define-runtime &identifier-wrap-source gx#&identifier-wrap-source)
         (%#define-runtime
          &identifier-wrap-marks-set!
          gx#&identifier-wrap-marks-set!)
         (%#define-runtime &identifier-wrap-e-set! gx#&identifier-wrap-e-set!)
         (%#define-runtime
          &identifier-wrap-source-set!
          gx#&identifier-wrap-source-set!)
         (%#begin (%#begin-syntax
                   (%#call (%#ref load-module)
                           (%#quote "gerbil/expander/stx~1")))
                  (%#define-syntax identifier-wrap |gx[:0:]#identifier-wrap|))
         (%#define-runtime syntax-wrap::t gx#syntax-wrap::t)
         (%#define-runtime syntax-wrap? gx#syntax-wrap?)
         (%#define-runtime make-syntax-wrap gx#make-syntax-wrap)
         (%#define-runtime syntax-wrap-mark gx#syntax-wrap-mark)
         (%#define-runtime syntax-wrap-e gx#syntax-wrap-e)
         (%#define-runtime syntax-wrap-source gx#syntax-wrap-source)
         (%#define-runtime syntax-wrap-mark-set! gx#syntax-wrap-mark-set!)
         (%#define-runtime syntax-wrap-e-set! gx#syntax-wrap-e-set!)
         (%#define-runtime syntax-wrap-source-set! gx#syntax-wrap-source-set!)
         (%#define-runtime &syntax-wrap-mark gx#&syntax-wrap-mark)
         (%#define-runtime &syntax-wrap-e gx#&syntax-wrap-e)
         (%#define-runtime &syntax-wrap-source gx#&syntax-wrap-source)
         (%#define-runtime &syntax-wrap-mark-set! gx#&syntax-wrap-mark-set!)
         (%#define-runtime &syntax-wrap-e-set! gx#&syntax-wrap-e-set!)
         (%#define-runtime
          &syntax-wrap-source-set!
          gx#&syntax-wrap-source-set!)
         (%#define-syntax syntax-wrap |gx[:0:]#syntax-wrap|)
         (%#define-runtime syntax-quote::t gx#syntax-quote::t)
         (%#define-runtime syntax-quote? gx#syntax-quote?)
         (%#define-runtime make-syntax-quote gx#make-syntax-quote)
         (%#define-runtime syntax-quote-context gx#syntax-quote-context)
         (%#define-runtime syntax-quote-marks gx#syntax-quote-marks)
         (%#define-runtime syntax-quote-e gx#syntax-quote-e)
         (%#define-runtime syntax-quote-source gx#syntax-quote-source)
         (%#define-runtime
          syntax-quote-context-set!
          gx#syntax-quote-context-set!)
         (%#define-runtime syntax-quote-marks-set! gx#syntax-quote-marks-set!)
         (%#define-runtime syntax-quote-e-set! gx#syntax-quote-e-set!)
         (%#define-runtime
          syntax-quote-source-set!
          gx#syntax-quote-source-set!)
         (%#define-runtime &syntax-quote-context gx#&syntax-quote-context)
         (%#define-runtime &syntax-quote-marks gx#&syntax-quote-marks)
         (%#define-runtime &syntax-quote-e gx#&syntax-quote-e)
         (%#define-runtime &syntax-quote-source gx#&syntax-quote-source)
         (%#define-runtime
          &syntax-quote-context-set!
          gx#&syntax-quote-context-set!)
         (%#define-runtime
          &syntax-quote-marks-set!
          gx#&syntax-quote-marks-set!)
         (%#define-runtime &syntax-quote-e-set! gx#&syntax-quote-e-set!)
         (%#define-runtime
          &syntax-quote-source-set!
          gx#&syntax-quote-source-set!)
         (%#define-syntax syntax-quote |gx[:0:]#syntax-quote|)
         (%#define-runtime identifier? gx#identifier?)
         (%#define-runtime identifier-quote? gx#identifier-quote?)
         (%#define-runtime sealed-syntax? gx#sealed-syntax?)
         (%#define-runtime sealed-syntax-unwrap gx#sealed-syntax-unwrap)
         (%#define-runtime syntax-e gx#syntax-e)
         (%#define-runtime syntax->datum gx#syntax->datum)
         (%#begin (%#define-runtime datum->syntax__% gx#datum->syntax__%)
                  (%#begin (%#define-runtime
                            datum->syntax__0
                            gx#datum->syntax__0)
                           (%#define-runtime
                            datum->syntax__1
                            gx#datum->syntax__1)
                           (%#define-runtime datum->syntax gx#datum->syntax)))
         (%#begin (%#define-runtime stx-unwrap__% gx#stx-unwrap__%)
                  (%#begin (%#define-runtime stx-unwrap__0 gx#stx-unwrap__0)
                           (%#define-runtime stx-unwrap gx#stx-unwrap)))
         (%#define-runtime stx-wrap gx#stx-wrap)
         (%#define-runtime stx-rewrap gx#stx-rewrap)
         (%#define-runtime stx-apply-mark gx#stx-apply-mark)
         (%#define-runtime apply-mark gx#apply-mark)
         (%#define-runtime stx-e gx#stx-e)
         (%#define-runtime stx-source gx#stx-source)
         (%#define-runtime stx-wrap-source gx#stx-wrap-source)
         (%#define-runtime stx-datum? gx#stx-datum?)
         (%#define-runtime self-quoting? gx#self-quoting?)
         (%#define-runtime stx-boolean? gx#stx-boolean?)
         (%#define-runtime stx-keyword? gx#stx-keyword?)
         (%#define-runtime stx-char? gx#stx-char?)
         (%#define-runtime stx-number? gx#stx-number?)
         (%#define-runtime stx-fixnum? gx#stx-fixnum?)
         (%#define-runtime stx-string? gx#stx-string?)
         (%#define-runtime stx-null? gx#stx-null?)
         (%#define-runtime stx-pair? gx#stx-pair?)
         (%#define-runtime stx-list? gx#stx-list?)
         (%#define-runtime stx-pair/null? gx#stx-pair/null?)
         (%#define-runtime stx-vector? gx#stx-vector?)
         (%#define-runtime stx-box? gx#stx-box?)
         (%#define-runtime stx-eq? gx#stx-eq?)
         (%#define-runtime stx-eqv? gx#stx-eqv?)
         (%#define-runtime stx-equal? gx#stx-equal?)
         (%#define-runtime stx-false? gx#stx-false?)
         (%#define-runtime stx-identifier gx#stx-identifier)
         (%#define-runtime stx-identifier-marks gx#stx-identifier-marks)
         (%#define-runtime stx-identifier-marks* gx#stx-identifier-marks*)
         (%#define-runtime stx-identifier-context gx#stx-identifier-context)
         (%#define-runtime identifier-list? gx#identifier-list?)
         (%#begin (%#define-runtime genident__% gx#genident__%)
                  (%#begin (%#define-runtime genident__0 gx#genident__0)
                           (%#define-runtime genident__1 gx#genident__1)
                           (%#define-runtime genident gx#genident)))
         (%#define-runtime gentemps gx#gentemps)
         (%#define-runtime syntax->list gx#syntax->list)
         (%#define-runtime stx-car gx#stx-car)
         (%#define-runtime stx-cdr gx#stx-cdr)
         (%#define-runtime stx-length gx#stx-length)
         (%#define-runtime stx-for-each gx#stx-for-each)
         (%#define-runtime stx-for-each1 gx#stx-for-each1)
         (%#define-runtime stx-for-each2 gx#stx-for-each2)
         (%#define-runtime stx-map gx#stx-map)
         (%#define-runtime stx-map1 gx#stx-map1)
         (%#define-runtime stx-map2 gx#stx-map2)
         (%#define-runtime stx-andmap gx#stx-andmap)
         (%#define-runtime stx-ormap gx#stx-ormap)
         (%#define-runtime stx-foldl gx#stx-foldl)
         (%#define-runtime stx-foldr gx#stx-foldr)
         (%#define-runtime stx-reverse gx#stx-reverse)
         (%#define-runtime stx-last gx#stx-last)
         (%#define-runtime stx-last-pair gx#stx-last-pair)
         (%#define-runtime stx-list-tail gx#stx-list-tail)
         (%#define-runtime stx-list-ref gx#stx-list-ref)
         (%#begin (%#define-runtime stx-plist?__% gx#stx-plist?__%)
                  (%#begin (%#define-runtime stx-plist?__0 gx#stx-plist?__0)
                           (%#define-runtime stx-plist? gx#stx-plist?)))
         (%#begin (%#define-runtime stx-getq__% gx#stx-getq__%)
                  (%#begin (%#define-runtime stx-getq__0 gx#stx-getq__0)
                           (%#define-runtime stx-getq gx#stx-getq))))
(%#call (%#ref load-module) (%#quote "gerbil/expander/stx~0"))
