prelude: :gerbil/core
package: gerbil/expander
namespace: gx

(%#begin (%#export #t)
         (%#import
          :gerbil/expander/common
          :gerbil/expander/stx
          :gerbil/expander/core
          :gerbil/expander/top)
         (%#define-runtime __module-registry gx#__module-registry)
         (%#define-runtime __module-pkg-cache gx#__module-pkg-cache)
         (%#define-runtime module-import::t gx#module-import::t)
         (%#define-runtime module-import? gx#module-import?)
         (%#define-runtime make-module-import gx#make-module-import)
         (%#define-runtime module-import-source gx#module-import-source)
         (%#define-runtime module-import-name gx#module-import-name)
         (%#define-runtime module-import-phi gx#module-import-phi)
         (%#define-runtime module-import-weak? gx#module-import-weak?)
         (%#define-runtime
          module-import-source-set!
          gx#module-import-source-set!)
         (%#define-runtime module-import-name-set! gx#module-import-name-set!)
         (%#define-runtime module-import-phi-set! gx#module-import-phi-set!)
         (%#define-runtime
          module-import-weak?-set!
          gx#module-import-weak?-set!)
         (%#define-runtime &module-import-source gx#&module-import-source)
         (%#define-runtime &module-import-name gx#&module-import-name)
         (%#define-runtime &module-import-phi gx#&module-import-phi)
         (%#define-runtime &module-import-weak? gx#&module-import-weak?)
         (%#define-runtime
          &module-import-source-set!
          gx#&module-import-source-set!)
         (%#define-runtime
          &module-import-name-set!
          gx#&module-import-name-set!)
         (%#define-runtime &module-import-phi-set! gx#&module-import-phi-set!)
         (%#define-runtime
          &module-import-weak?-set!
          gx#&module-import-weak?-set!)
         (%#begin (%#begin-syntax
                   (%#call (%#ref load-module)
                           (%#quote "gerbil/expander/module~1")))
                  (%#define-syntax module-import |gx[:0:]#module-import|))
         (%#define-runtime module-export::t gx#module-export::t)
         (%#define-runtime module-export? gx#module-export?)
         (%#define-runtime make-module-export gx#make-module-export)
         (%#define-runtime module-export-context gx#module-export-context)
         (%#define-runtime module-export-key gx#module-export-key)
         (%#define-runtime module-export-phi gx#module-export-phi)
         (%#define-runtime module-export-name gx#module-export-name)
         (%#define-runtime module-export-weak? gx#module-export-weak?)
         (%#define-runtime
          module-export-context-set!
          gx#module-export-context-set!)
         (%#define-runtime module-export-key-set! gx#module-export-key-set!)
         (%#define-runtime module-export-phi-set! gx#module-export-phi-set!)
         (%#define-runtime module-export-name-set! gx#module-export-name-set!)
         (%#define-runtime
          module-export-weak?-set!
          gx#module-export-weak?-set!)
         (%#define-runtime &module-export-context gx#&module-export-context)
         (%#define-runtime &module-export-key gx#&module-export-key)
         (%#define-runtime &module-export-phi gx#&module-export-phi)
         (%#define-runtime &module-export-name gx#&module-export-name)
         (%#define-runtime &module-export-weak? gx#&module-export-weak?)
         (%#define-runtime
          &module-export-context-set!
          gx#&module-export-context-set!)
         (%#define-runtime &module-export-key-set! gx#&module-export-key-set!)
         (%#define-runtime &module-export-phi-set! gx#&module-export-phi-set!)
         (%#define-runtime
          &module-export-name-set!
          gx#&module-export-name-set!)
         (%#define-runtime
          &module-export-weak?-set!
          gx#&module-export-weak?-set!)
         (%#define-syntax module-export |gx[:0:]#module-export|)
         (%#define-runtime import-set::t gx#import-set::t)
         (%#define-runtime import-set? gx#import-set?)
         (%#define-runtime make-import-set gx#make-import-set)
         (%#define-runtime import-set-source gx#import-set-source)
         (%#define-runtime import-set-phi gx#import-set-phi)
         (%#define-runtime import-set-imports gx#import-set-imports)
         (%#define-runtime import-set-source-set! gx#import-set-source-set!)
         (%#define-runtime import-set-phi-set! gx#import-set-phi-set!)
         (%#define-runtime import-set-imports-set! gx#import-set-imports-set!)
         (%#define-runtime &import-set-source gx#&import-set-source)
         (%#define-runtime &import-set-phi gx#&import-set-phi)
         (%#define-runtime &import-set-imports gx#&import-set-imports)
         (%#define-runtime &import-set-source-set! gx#&import-set-source-set!)
         (%#define-runtime &import-set-phi-set! gx#&import-set-phi-set!)
         (%#define-runtime
          &import-set-imports-set!
          gx#&import-set-imports-set!)
         (%#define-syntax import-set |gx[:0:]#import-set|)
         (%#define-runtime export-set::t gx#export-set::t)
         (%#define-runtime export-set? gx#export-set?)
         (%#define-runtime make-export-set gx#make-export-set)
         (%#define-runtime export-set-source gx#export-set-source)
         (%#define-runtime export-set-phi gx#export-set-phi)
         (%#define-runtime export-set-exports gx#export-set-exports)
         (%#define-runtime export-set-source-set! gx#export-set-source-set!)
         (%#define-runtime export-set-phi-set! gx#export-set-phi-set!)
         (%#define-runtime export-set-exports-set! gx#export-set-exports-set!)
         (%#define-runtime &export-set-source gx#&export-set-source)
         (%#define-runtime &export-set-phi gx#&export-set-phi)
         (%#define-runtime &export-set-exports gx#&export-set-exports)
         (%#define-runtime &export-set-source-set! gx#&export-set-source-set!)
         (%#define-runtime &export-set-phi-set! gx#&export-set-phi-set!)
         (%#define-runtime
          &export-set-exports-set!
          gx#&export-set-exports-set!)
         (%#define-syntax export-set |gx[:0:]#export-set|)
         (%#define-runtime import-expander::t gx#import-expander::t)
         (%#define-runtime import-expander? gx#import-expander?)
         (%#define-runtime make-import-expander gx#make-import-expander)
         (%#define-runtime import-expander-context gx#import-expander-context)
         (%#define-runtime import-expander-phi gx#import-expander-phi)
         (%#define-runtime import-expander-e gx#import-expander-e)
         (%#define-runtime
          import-expander-context-set!
          gx#import-expander-context-set!)
         (%#define-runtime
          import-expander-phi-set!
          gx#import-expander-phi-set!)
         (%#define-runtime import-expander-e-set! gx#import-expander-e-set!)
         (%#define-runtime
          &import-expander-context
          gx#&import-expander-context)
         (%#define-runtime &import-expander-phi gx#&import-expander-phi)
         (%#define-runtime &import-expander-e gx#&import-expander-e)
         (%#define-runtime
          &import-expander-context-set!
          gx#&import-expander-context-set!)
         (%#define-runtime
          &import-expander-phi-set!
          gx#&import-expander-phi-set!)
         (%#define-runtime &import-expander-e-set! gx#&import-expander-e-set!)
         (%#define-syntax import-expander |gx[:0:]#import-expander|)
         (%#define-runtime export-expander::t gx#export-expander::t)
         (%#define-runtime export-expander? gx#export-expander?)
         (%#define-runtime make-export-expander gx#make-export-expander)
         (%#define-runtime export-expander-context gx#export-expander-context)
         (%#define-runtime export-expander-phi gx#export-expander-phi)
         (%#define-runtime export-expander-e gx#export-expander-e)
         (%#define-runtime
          export-expander-context-set!
          gx#export-expander-context-set!)
         (%#define-runtime
          export-expander-phi-set!
          gx#export-expander-phi-set!)
         (%#define-runtime export-expander-e-set! gx#export-expander-e-set!)
         (%#define-runtime
          &export-expander-context
          gx#&export-expander-context)
         (%#define-runtime &export-expander-phi gx#&export-expander-phi)
         (%#define-runtime &export-expander-e gx#&export-expander-e)
         (%#define-runtime
          &export-expander-context-set!
          gx#&export-expander-context-set!)
         (%#define-runtime
          &export-expander-phi-set!
          gx#&export-expander-phi-set!)
         (%#define-runtime &export-expander-e-set! gx#&export-expander-e-set!)
         (%#define-syntax export-expander |gx[:0:]#export-expander|)
         (%#define-runtime
          import-export-expander::t
          gx#import-export-expander::t)
         (%#define-runtime import-export-expander? gx#import-export-expander?)
         (%#define-runtime
          make-import-export-expander
          gx#make-import-export-expander)
         (%#define-runtime
          import-export-expander-context
          gx#import-export-expander-context)
         (%#define-runtime
          import-export-expander-phi
          gx#import-export-expander-phi)
         (%#define-runtime
          import-export-expander-e
          gx#import-export-expander-e)
         (%#define-runtime
          import-export-expander-context-set!
          gx#import-export-expander-context-set!)
         (%#define-runtime
          import-export-expander-phi-set!
          gx#import-export-expander-phi-set!)
         (%#define-runtime
          import-export-expander-e-set!
          gx#import-export-expander-e-set!)
         (%#define-runtime
          &import-export-expander-context
          gx#&import-export-expander-context)
         (%#define-runtime
          &import-export-expander-phi
          gx#&import-export-expander-phi)
         (%#define-runtime
          &import-export-expander-e
          gx#&import-export-expander-e)
         (%#define-runtime
          &import-export-expander-context-set!
          gx#&import-export-expander-context-set!)
         (%#define-runtime
          &import-export-expander-phi-set!
          gx#&import-export-expander-phi-set!)
         (%#define-runtime
          &import-export-expander-e-set!
          gx#&import-export-expander-e-set!)
         (%#define-syntax
          import-export-expander
          |gx[:0:]#import-export-expander|)
         (%#define-runtime
          current-import-expander-phi
          gx#current-import-expander-phi)
         (%#define-runtime
          current-export-expander-phi
          gx#current-export-expander-phi)
         (%#define-runtime
          current-module-reader-path
          gx#current-module-reader-path)
         (%#define-runtime
          current-module-reader-args
          gx#current-module-reader-args)
         (%#define-runtime source-file-settings gx#source-file-settings)
         (%#define-runtime
          call-with-input-source-file
          gx#call-with-input-source-file)
         (%#define-runtime module-context:::init! gx#module-context:::init!)
         (%#begin (%#define-runtime
                   prelude-context:::init!__%
                   gx#prelude-context:::init!__%)
                  (%#begin (%#define-runtime
                            prelude-context:::init!__0
                            gx#prelude-context:::init!__0)
                           (%#define-runtime
                            prelude-context:::init!
                            gx#prelude-context:::init!)))
         (%#define-runtime
          import-export-expander-init!
          gx#import-export-expander-init!)
         (%#define-runtime import-expander:::init! gx#import-expander:::init!)
         (%#define-runtime export-expander:::init! gx#export-expander:::init!)
         (%#define-runtime
          import-export-expander:::init!
          gx#import-export-expander:::init!)
         (%#define-runtime
          import-expander::apply-import-expander
          gx#import-expander::apply-import-expander)
         (%#define-runtime
          export-expander::apply-export-expander
          gx#export-expander::apply-export-expander)
         (%#define-runtime module-source-path gx#module-source-path)
         (%#begin (%#define-runtime import-module__% gx#import-module__%)
                  (%#begin (%#define-runtime
                            import-module__0
                            gx#import-module__0)
                           (%#define-runtime
                            import-module__1
                            gx#import-module__1)
                           (%#define-runtime import-module gx#import-module)))
         (%#define-runtime eval-module gx#eval-module)
         (%#define-runtime core-eval-module gx#core-eval-module)
         (%#begin (%#define-runtime
                   core-context-prelude__%
                   gx#core-context-prelude__%)
                  (%#begin (%#define-runtime
                            core-context-prelude__0
                            gx#core-context-prelude__0)
                           (%#define-runtime
                            core-context-prelude
                            gx#core-context-prelude)))
         (%#define-runtime
          core-module->prelude-context
          gx#core-module->prelude-context)
         (%#begin (%#define-runtime
                   core-import-module__%
                   gx#core-import-module__%)
                  (%#begin (%#define-runtime
                            core-import-module__0
                            gx#core-import-module__0)
                           (%#define-runtime
                            core-import-module
                            gx#core-import-module)))
         (%#define-runtime core-read-module gx#core-read-module)
         (%#define-runtime core-read-module/sexp gx#core-read-module/sexp)
         (%#define-runtime core-read-module/lang gx#core-read-module/lang)
         (%#define-runtime
          core-read-module-package
          gx#core-read-module-package)
         (%#define-runtime
          core-module-path->namespace
          gx#core-module-path->namespace)
         (%#define-runtime core-module-path->id gx#core-module-path->id)
         (%#begin (%#define-runtime
                   core-resolve-module-path__%
                   gx#core-resolve-module-path__%)
                  (%#begin (%#define-runtime
                            core-resolve-module-path__0
                            gx#core-resolve-module-path__0)
                           (%#define-runtime
                            core-resolve-module-path
                            gx#core-resolve-module-path)))
         (%#define-runtime
          core-resolve-library-module-path
          gx#core-resolve-library-module-path)
         (%#define-runtime
          core-resolve-library-relative-module-path
          gx#core-resolve-library-relative-module-path)
         (%#define-runtime
          core-library-package-path-prefix
          gx#core-library-package-path-prefix)
         (%#begin (%#define-runtime
                   core-library-package-plist__%
                   gx#core-library-package-plist__%)
                  (%#begin (%#define-runtime
                            core-library-package-plist__0
                            gx#core-library-package-plist__0)
                           (%#define-runtime
                            core-library-package-plist
                            gx#core-library-package-plist)))
         (%#define-runtime
          core-library-module-path?
          gx#core-library-module-path?)
         (%#define-runtime
          core-library-relative-module-path?
          gx#core-library-relative-module-path?)
         (%#define-runtime
          core-special-module-path?
          gx#core-special-module-path?)
         (%#define-runtime core-bound-prelude? gx#core-bound-prelude?)
         (%#define-runtime core-bound-module? gx#core-bound-module?)
         (%#define-runtime
          core-bound-module-prelude?
          gx#core-bound-module-prelude?)
         (%#begin (%#define-runtime
                   core-bind-import!__%
                   gx#core-bind-import!__%)
                  (%#begin (%#define-runtime
                            core-bind-import!__0
                            gx#core-bind-import!__0)
                           (%#define-runtime
                            core-bind-import!__1
                            gx#core-bind-import!__1)
                           (%#define-runtime
                            core-bind-import!
                            gx#core-bind-import!)))
         (%#begin (%#define-runtime
                   core-bind-weak-import!__%
                   gx#core-bind-weak-import!__%)
                  (%#begin (%#define-runtime
                            core-bind-weak-import!__0
                            gx#core-bind-weak-import!__0)
                           (%#define-runtime
                            core-bind-weak-import!
                            gx#core-bind-weak-import!)))
         (%#define-runtime
          core-resolve-module-export
          gx#core-resolve-module-export)
         (%#begin (%#define-runtime
                   core-module-export->import__%
                   gx#core-module-export->import__%)
                  (%#begin (%#define-runtime
                            core-module-export->import__0
                            gx#core-module-export->import__0)
                           (%#define-runtime
                            core-module-export->import__1
                            gx#core-module-export->import__1)
                           (%#define-runtime
                            core-module-export->import
                            gx#core-module-export->import)))
         (%#define-runtime core-expand-module% gx#core-expand-module%)
         (%#define-runtime
          core-expand-module-begin
          gx#core-expand-module-begin)
         (%#define-runtime core-expand-module-body gx#core-expand-module-body)
         (%#define-runtime
          core-expand-import/export
          gx#core-expand-import/export)
         (%#begin (%#define-runtime
                   core-expand-import%__%
                   gx#core-expand-import%__%)
                  (%#begin (%#define-runtime
                            core-expand-import%__0
                            gx#core-expand-import%__0)
                           (%#define-runtime
                            core-expand-import%
                            gx#core-expand-import%)))
         (%#define-runtime
          core-import-nested-module
          gx#core-import-nested-module)
         (%#define-runtime
          core-expand-import-source
          gx#core-expand-import-source)
         (%#begin (%#define-runtime
                   core-expand-export%__%
                   gx#core-expand-export%__%)
                  (%#begin (%#define-runtime
                            core-expand-export%__0
                            gx#core-expand-export%__0)
                           (%#define-runtime
                            core-expand-export%
                            gx#core-expand-export%)))
         (%#define-runtime
          core-expand-export-source
          gx#core-expand-export-source)
         (%#define-runtime core-expand-provide% gx#core-expand-provide%)
         (%#begin (%#define-runtime
                   core-bind-feature!__%
                   gx#core-bind-feature!__%)
                  (%#begin (%#define-runtime
                            core-bind-feature!__0
                            gx#core-bind-feature!__0)
                           (%#define-runtime
                            core-bind-feature!__1
                            gx#core-bind-feature!__1)
                           (%#define-runtime
                            core-bind-feature!__2
                            gx#core-bind-feature!__2)
                           (%#define-runtime
                            core-bind-feature!
                            gx#core-bind-feature!))))
(%#call (%#ref load-module) (%#quote "gerbil/expander/module~0"))
