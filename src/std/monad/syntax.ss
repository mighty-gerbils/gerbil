(import :std/contract)
(export #t)

(defsyntax (du stx)
  (def (expand-bind id stx)
    (with-syntax* ((id id)
		   (bind (stx-identifier #'id #'id ".>>="))
		   (seq (stx-identifier #'id #'id ".>>")))
    (syntax-case stx (<-)
      ((var <- from body ... end)
       #'(bind from (lambda (var) (du id body ... end))))
      ((>> body ... end)
       #'(seq >> (du id body ... end)))
      ((end) #'end))))

  (syntax-case stx ()
    ((_ id body ...)
     (identifier? #'id)
     (with-syntax ((bindings (expand-bind #'id #'(body ...))))
       #'bindings))
    ((_ (id expr ~ Monad) body ...)
     (and (identifier? #'id)
          (identifier? #'~))
     #'(using (id expr ~ Monad)
           (du id body ...)))
    ((_ (id ~ Monad) body ...)
     (and (identifier? #'id)
          (identifier? #'~))
     #'(using (id ~ Monad)
       (du id body ...)))
    ((_ ((id this ...) rest ...) body ...)
     #'(using ((id this ...) rest ...)
	 (du id body ...)))))
