#+TITLE: SXML: XML and HTML (AKA XML Infoset) data as S-expressions
#+EXPORT_FILE_NAME: ../../../../doc/reference/std/markup/sxml/README.md
#+OPTIONS: toc:nil

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      :include siblings :depth 3 :ignore (this)
:END:
:CONTENTS:
- [[#sxml-s-expression-extensible-markup-language][SXML: S-expression eXtensible Markup Language]]
  - [[#concepts][Concepts]]
  - [[#printer][Printer]]
    - [[#write-sxml][write-sxml]]
  - [[#sxml-queries][SXML Queries]]
    - [[#sxpath][sxpath]]
    - [[#sxml-select][sxml-select]]
    - [[#sxml-attributes][sxml-attributes]]
    - [[#sxml-e][sxml-e]]
    - [[#sxml-find][sxml-find]]
    - [[#sxml-select-0][sxml-select*]]
    - [[#sxml-attribute-e][sxml-attribute-e]]
    - [[#sxml-attribute-getq][sxml-attribute-getq]]
    - [[#sxml-class][sxml-class?]]
    - [[#sxml-find-0][sxml-find*]]
    - [[#sxml-e-0][sxml-e?]]
    - [[#sxml-id][sxml-id?]]
    - [[#sxml-children][sxml-children]]
    - [[#sxml-findcontext][sxml-find/context]]
:END:

* SXML: S-expression eXtensible Markup Language
:PROPERTIES:
:CUSTOM_ID: sxml-s-expression-extensible-markup-language
:END:

This module adds utilities to work with XML and HTML. It has been
inspired by Oleg's SXML package. See more detailed info about SXML can
be found [[http://okmij.org/ftp/Scheme/xml.html][here]].

::: tip To use the bindings from this module:

#+begin_src scheme
(import :std/markup/sxml)
#+end_src

::: 

** Concepts
:PROPERTIES:
:CUSTOM_ID: concepts
:END:

"SXML is an abstract syntax tree of an XML document. SXML is also a
concrete representation of the XML Infoset in the form of
S-expressions."

When developing in Gerbil we generally use sexps. XML and HTML are not
quite sexps.

For parsing and printing have a look at [[file:xml.org][XML]] or the [[./html.md][HTML docs]]
depending on your needs.

There's a lot more detail in the [[https://okmij.org/ftp/Scheme/SXML.html][SMXL Specification]] so for basics a
simple =<select>= tag.

#+begin_src scheme
  > (import :std/markup/sxml)
  > (begin (write-sxml '(select (@ (name "Examiner"))
    (option (@ (value "1")) "Mr. Scruff") 
    (option (@ (value "2")) "Beetlejuice"))
  		     indent: #t)
    (newline))
  <select name="Examiner"
   ><option value="1"
    >Mr. Scruff</option
   ><option value="2"
    >Beetlejuice</option
   ></select
  >
#+end_src

If the second item is a list that starts with an =@= symbol, =(@ ...}=
marks the start of the attributes alist.

Otherwise it's an element or a block of text. Simple!

If you notice, the =write-sxml= function indents the html in a
whitespace sensitive way to ensure there are no extra characters in the
actual output.

** Printer
:PROPERTIES:
:CUSTOM_ID: printer
:END:

All of HTML, XML and XHTML are printed from the same function.

*** write-sxml
:PROPERTIES:
:CUSTOM_ID: write-sxml
:END:

#+begin_src scheme
  (def (write-sxml
       sxml
       port: (port (current-sxml-output-port))
       xml?: (xml? (current-sxml-output-xml?))
       indent: (indent #f)
       quote-char: (quote-char #\")) ...)

  sxml   := An sxml element, a list of elements, or text.
  port   := A keyword for binding the output port
  xml?   := A keyword for boolean choosing XML or HTML. Defaults to #f
  indent := A keyword where #f means no indentation and a number means indent (aka
            pretty print) the output hiegenically staring at this level.
  quote-char := A keyword that chooses the quote character, either #\"
                or #\', for attributess.
#+end_src

This is a generic abstract markup printer.  The =:std/xml= and
=:std/html= printers are based off of this one for more specific
usage.


#+begin_src scheme
  > (write-sxml '(*TOP*
  		(div
  		 (p "I'm paragraph one")
  		 (p "I'm paragraph two"))))
  <div><p>I'm paragraph one</p><p>I'm paragraph two</p></div>
#+end_src

By default the =(current-sxml-output-port)= is set to
=(current-output-port)=. It may not be what is expected and is really
just for REPL use so set the port or parameterize
=(current-sxml-output-port)= for best results.

The XML/HTML can be indented. It does so inside the tags so as not to
pollute or change semantics.

#+begin_src scheme
  > (write-sxml '(*TOP*
  		(div
  		 (p "I'm paragraph one")
  		 (p "I'm paragraph two"))) indent: 1)
  <div
    ><p
     >I'm paragraph one</p
    ><p
     >I'm paragraph two</p
    ></div
    > 
#+end_src

For HTML, the default, empty tags with no close are allowed.

#+begin_src scheme
  > (write-sxml'(*TOP*
                 (area)
                 (base)
                 (br)
                 (col)
                 (embed)
                 (hr)
                 (img)
                 (input)
                 (link)
                 (meta)
                 (track)
                 (wbr)))
          
  <area><base><br><col><embed><hr><img><input><link><meta><track><wbr>
#+end_src

When set to =xml?= things are different.

#+begin_src scheme
  > (write-sxml'(*TOP*
                 (area)
                 (base)
                 (br)
                 (col)
                 (embed)
                 (hr)
                 (img)
                 (input)
                 (link)
                 (meta)
                 (track)
                 (wbr)) xml?: #t)
          
  <area /><base /><br /><col /><embed /><hr /><img /><input /><link /><meta /><track /><wbr />
#+end_src




** SXML Queries
:PROPERTIES:
:CUSTOM_ID: sxml-queries
:END:

SXPath is an XPath-conforming XML query language that internally
relies on SXML as a representation of the XML Infoset.

TODO: https://gitlab.com/wak/wak-sxml-tools/ <--- there's an
XPath->SXPath parser.

It's by Lizorkin who also has a good tutorial [[https://web.archive.org/web/20070414181503/http://modis.ispras.ru/Lizorkin/sxml-tutorial.html][here]],

*** sxpath
:PROPERTIES:
:CUSTOM_ID: sxpath
:END:
#+begin_src scheme
(sxpath path) -> sxml

  path := list
#+end_src

Evaluate an abbreviated SXPath. The syntax will follow but assume it's
a sexp version of XPath similar to how SXML is a sexp version of XML.

The easy way is to think of SXPath as a list of path components. It's
also important to realize that attributes are themselves a node of
type =@=.

So ='(html head title)= is like the ="​/​html/​head/​title"= XPath and the
=//row[@r​='8']= instead can be said like =(// (row (@ r (equal?
"8"))))=

There are a few special path components:

 - *  :: matches an element node.
 - // :: matches any one or many consecutive path components. 
 - @  :: selects the attribute list node.

 If a path component is a list it's one of these forms:

 - (equal? x) :: matches if the node under examination matches x using
   node-equal?
 - (eq? x) :: matches if the node under examination matches x using
   node-eq?
 - (<path> n) :: -  :: matches the n-th node matching same path
   component. n starts from 1. Negative numbers start from the end of
   the node list backward. This is =path[n]= syntax in XPath.
 -  (<path> (<predicate>...)) :: matches a path component path and
   =(sxpath (<predicate>...))= on those nodes are not empty. This is
   =path[predicate...]= syntax in XPath.

Here's the syntax: 
   
#+begin_example
    sxpath:: AbbrPath -> Converter, or
    sxpath:: AbbrPath -> Node|Nodeset -> Nodeset
#+end_example

AbbrPath is a list. It is translated to the full SXPath according to
the following rewriting rules:

#+begin_src scheme
 (sxpath '()) -> (node-join)
 (sxpath '(path-component ...)) ->
        (node-join (sxpath1 path-component) (sxpath '(...)))
 (sxpath1 '//) -> (node-or
             (node-self (node-typeof? '*any*))
              (node-closure (node-typeof? '*any*)))
 (sxpath1 '(equal? x)) -> (select-kids (node-equal? x))
 (sxpath1 '(eq? x))    -> (select-kids (node-eq? x))
 (sxpath1 ?symbol)     -> (select-kids (node-typeof? ?symbol)
 (sxpath1 procedure)   -> procedure
 (sxpath1 '(?symbol ...)) -> (sxpath1 '((?symbol) ...))
 (sxpath1 '(path reducer ...)) ->
        (node-reduce (sxpath path) (sxpathr reducer) ...)
 (sxpathr number)      -> (node-pos number)
 (sxpathr path-filter) -> (filter (sxpath path-filter))
#+end_src

The =sxpath1= and =sxpathr= operators are not exported and just there
for show.
*** sxml-select
:PROPERTIES:
:CUSTOM_ID: sxml-select
:END:
#+begin_src scheme
(sxml-select n predf [mapf = values]) -> sxml

  n     := sxml nodes
  predf := predicate function
  mapf  := transform function
#+end_src

Collects all children from node /n/ that satisfy a predicate /predf/;
optionally transforms result with mapping function /mapf/ once a node
satisfies a predicate, its children are not traversed.

*** sxml-attributes
:PROPERTIES:
:CUSTOM_ID: sxml-attributes
:END:
#+begin_src scheme
(sxml-attributes n) -> list | #f

  n := sxml node
#+end_src

Returns the attributes of given node /n/ or #f if node does have any
attributes.

*** sxml-e
:PROPERTIES:
:CUSTOM_ID: sxml-e
:END:
#+begin_src scheme
(sxml-e n) -> symbol | #f

  n := sxml node
#+end_src

Returns the element type of node /n/ or #f if no type is found.

*** sxml-find
:PROPERTIES:
:CUSTOM_ID: sxml-find
:END:
#+begin_src scheme
(sxml-find n predf [mapf = values]) -> sxml

  n     := sxml nodes
  predf := predicate function
  mapf  := transform function
#+end_src

Find the first child that satisfies a predicate /predf/, using
depth-first search. Predicate /predf/ is a lambda which takes an node as
parameter and returns an boolean. If optional /mapf/ is given the
results satisfying /predf/ are transformed with it.

*** sxml-select*
:PROPERTIES:
:CUSTOM_ID: sxml-select-0
:END:
#+begin_src scheme
(sxml-select* n predf [mapf = values]) -> sxml

  n     := sxml nodes
  predf := predicate function
  mapf  := transform function
#+end_src

Select from immediate children of node /n/ using predicate function
/predf/. Results satisfying /predf/ are transformed if given optional
mapping function /mapf/.

*** sxml-attribute-e
:PROPERTIES:
:CUSTOM_ID: sxml-attribute-e
:END:
#+begin_src scheme
(sxml-attribute-e n key) -> any | #f

  n   := sxml node
  key := string; node key
#+end_src

Returns the node /n/ attribute value for given /key/ or #f if value is
not found.

*** sxml-attribute-getq
:PROPERTIES:
:CUSTOM_ID: sxml-attribute-getq
:END:
#+begin_src scheme
(sxml-attribute-getq key attrs) -> any

  key   := string; node key
  attrs := alist?
#+end_src

attribute list => value

*** sxml-class?
:PROPERTIES:
:CUSTOM_ID: sxml-class
:END:
#+begin_src scheme
(sxml-class? klass) -> lambda

  klass := string; node class to match
#+end_src

returns dom class

*** sxml-find*
:PROPERTIES:
:CUSTOM_ID: sxml-find-0
:END:
#+begin_src scheme
(sxml-find* n pred [mapf = values]) -> sxml | #f

  n    := sxml node
  pred := predicate fn
  mapf := transform fn
#+end_src

find in immediate children

*** sxml-e?
:PROPERTIES:
:CUSTOM_ID: sxml-e-0
:END:
#+begin_src scheme
(sxml-e? el) -> lambda

  el := sxml element
#+end_src

returns element type

*** sxml-id?
:PROPERTIES:
:CUSTOM_ID: sxml-id
:END:
#+begin_src scheme
(sxml-id? id) -> lambda

  id := sxml node id value
#+end_src

returns dom id

*** sxml-children
:PROPERTIES:
:CUSTOM_ID: sxml-children
:END:
#+begin_src scheme
(sxml-children n) -> list

  n := sxml node
#+end_src

returns nodes children as a list

*** sxml-find/context
:PROPERTIES:
:CUSTOM_ID: sxml-findcontext
:END:
#+begin_src scheme
(sxml-find/context n predf [mapf values]) -> sxml

  n     := sxml node
  predf := predicate fn to match
  mapf  := transform fn to apply to matches
#+end_src

find with context

