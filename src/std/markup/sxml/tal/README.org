#+TITLE: TAL: The Template Attribute Language
#+EXPORT_FILE_NAME: ../../../../../doc/reference/std/markup/sxml/tal/README.org
#+OPTIONS: toc:nil

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      :include all :depth 3 :ignore this
:CUSTOM_ID: contents
:END:
:CONTENTS:
- [[#tal-the-template-attribute-language][TAL: The Template Attribute Language]]
  - [[#attributes][Attributes]]
  - [[#define-tal][define-TAL]]
  - [[#current-tal-output-port][current-tal-output-port]]
  - [[#talattributes--replace-element-attributes][tal:attributes : Replace element attributes]]
  - [[#talcondition--conditionally-insert-or-remove-an-element][tal:condition : Conditionally insert or remove an element]]
  - [[#talcontent--replace-the-content-of-an-element][tal:content : Replace the content of an element]]
  - [[#taldefine][tal:define]]
  - [[#talswitch--set-up-a-switch-statement][tal:switch : Set up a switch statement]]
  - [[#talomit-tag--remove-an-element-leaving-its-contents][tal:omit-tag : Remove an element leaving its contents]]
  - [[#current-talon-error-and-talon-error][current-tal:on-error and tal:on-error.]]
    - [[#default-and-current-talon-error][Default and current-tal:on-error]]
    - [[#talon-error][tal:on-error]]
  - [[#talrepeat--repeat-an-element][tal:repeat : Repeat an element]]
    - [[#the-repeat-interface][The Repeat Interface]]
:END:

* TAL: The Template Attribute Language
:PROPERTIES:
:CUSTOM_ID: tal-the-template-attribute-language
:END:

I, (drewc <me at drewc dot ca>), first got introduced to =TAL= around
'05 by [[https://github.com/segv][@segv]] in his [[https://web.archive.org/web/20160315020505/http://www.3ofcoins.net/2010/01/21/yaclml-in-pictures-part-ii-templating/][Common Lisp YACLML]] library.

Its usefulness cannot be understated!

Here is my attempt at the [[https://zope.readthedocs.io/en/latest/zopebook/AppendixC.html][Zope Template Attribute Language]].

::: tip To use the bindings from this module:

#+begin_src scheme
(import :std/markup/tal)
#+end_src

:::



#+begin_quote
The Template Attribute Language (TAL) is a templating language used to
generate dynamic HTML and XML pages. Its main goal is to simplify the
collaboration between programmers and designers. This is achieved by
embedding TAL statements inside valid HTML (or XML) tags which can
then be worked on using common design tools.

-- https://en.wikipedia.org/wiki/Template_Attribute_Language
#+end_quote


A =TAL Statement= is an attribute in an HTML tag that has a =tal:=
prefix. For the most part the attribute value is *Gerbil* code.

To define a =TAL= procedure we take =HTML= code that may have Template
Attributes and transform it into a compiled function 

** Attributes
:PROPERTIES:
:CUSTOM_ID: attributes
:END:


  - define :: creates local variables, valid in the element bearing
    the attribute (including contained elements) or sets a "global".
  - switch :: Set up a switch statement
  - condition :: decides whether or not to render the tag (and all
    contained text)
  - repeat :: creates a loop variable and repeats the tag iterating a
    sequence, e.g. for creating a selection list or a table
  - case :: A case in a =tal:switch= statement
  - content :: replaces the content of the tag
  - replace :: replaces the tag (and therefore is not usable together
    with content or attributes)
  - attributes :: replaces the given attributes (e. g. by using
    ~tal:attributes="(name name) (id name)"~ the name and id attributes of
    an input field could be set to the value of the variable "name")
  - omit-tag :: allows to omit the start and end tag and only render
    the content if the given expression is true.
  - on-error :: if an error occurs, this attribute works like the
    content tag.

If a tag has more than one TAL attribute they are evaluated in the
above (fairly logical) order.

** =define-TAL=
:PROPERTIES:
:CUSTOM_ID: define-tal
:END:

#+begin_src scheme
  (define-TAL (name args ...) /key/ string-or-filename)

     (name args ...) := a definition for a function and parameters
                        similar to `def`

     /key/   := Optional, default `string:`, can also be file:

     string-or-filename := A literal string if the key is string:
                           A filename relative to the source if key is file:
#+end_src

 A function that outputs *HTML* makes up a portion of a web
 application. Using =define-TAL= makes it easy to use a block of
 *HTML/XHTML* as a function.

 #+begin_src scheme
   (import :std/markup/tal :std/format :std/text/utf8 :std/sugar)

   (define-TAL (htmlist items)
     "<ul><li
       tal:repeat=\"(i items)\"
       tal:content=\"(format &quot; ~a) ~a &quot; (repeat/i.roman) i)\">
       List Item</li></ul>") 
 #+end_src

 That gives a function that prints the *HTML* to
 =(current-tal-output-port)=.

 #+begin_src scheme
   > (htmlist ["These" "are" "list" "items"])
   <ul><li> i) These </li><li> ii) are </li><li> iii) list </li><li> iv) items </li></ul>   
 #+end_src

 We can get rid of the nested quotes by using the =#<<= syntax and
 hide the =&quot;='s with a quick definition.

 #+begin_src scheme
   (def (fmt sym . args) (apply format (symbol->string sym) args))
   (define-TAL (foo item) #<<EOF
   <p tal:content="(fmt '| 'item:~a' | item)"</p>
   EOF
   )
   > (foo 42)
   <p> &#39;item:42&#39; </p>> 
 #+end_src

Even better is the =file:= argument that pulls from a file.

The following is placed in =foo.html=

And the gerbil code is simple.

#+begin_src html :tangle foo.html
  <html>
   <head><title tal:content="as-is: title"><title></head>
    <body><p tal:replace="raw: (body)"></p></body>
  </html>
#+end_src

#+begin_src scheme
  (define-TAL (foo.html title body) file: "foo.html")
  (define-TAL (bar) "<hr>")
#+end_src

We can then use it creatively.

#+begin_src scheme
> (foo.html "Title &lt;hr>" bar)
<html>
 <head><title>Title &lt;hr></title></head>
  <body><hr></body>
</html>
#+end_src

As you can see it enables a fairly easy interaction between *HTML*
syntax and *Lisp*.

** current-tal-output-port
:PROPERTIES:
:CUSTOM_ID: current-tal-output-port
:END:

Output to where? The =current-tal-output-port= parameter of course!

Most of the time it will be over a socket but for testing purposes
we'll tear it down to a string.

#+begin_src scheme
  (defrule (:> tal ...)
    (let ((u8v (call-with-output-u8vector
  	      #u8() (lambda (p) (parameterize ((current-tal-output-port p))
  			     tal ...)))))
      (utf8->string u8v)))
#+end_src

Now we can see what it outputs and have a testable form as well.

#+begin_src scheme
  > (:> (foo.html "Inside :>" bar))
  "<html>\n <head><title>Inside :></title></head>\n  <body><hr></body>\n</html>\n"
#+end_src

As well as have a more documentation friendly output.

#+begin_src html
> (display #)
<html>
 <head><title>Inside :></title></head>
  <body><hr></body>
</html>
#+end_src

** tal:attributes : Replace element attributes
:PROPERTIES:
:CUSTOM_ID: talattributes--replace-element-attributes
:END:

/Syntax/:

#+begin_src bnf
argument             ::= attribute_statement [attribute_statement]*
attribute_statement  ::= ( attribute_name expression )
attribute_name       ::= Name
#+end_src

The =tal:attributes= statement is a way of setting the
=attribute_name= to the value of =expression=.

#+begin_src scheme
  (define-TAL (lnk href text) #<<EOF
  <a href="#"
     tal:attributes="(href href)"
     tal:content="text"> text </a>
  EOF
  )     
#+end_src

Works as expected

#+begin_src scheme
> (:> (lnk "https://duckduckgo.com" "Search"))
"<a href=\"https://duckduckgo.com\">Search</a>
#+end_src

If the =expression= evaluates to =#f= the attribute is omitted.

#+begin_src scheme
  > (:> (lnk #f "No Anchor!"))
  "<a>No Anchor!</a>"
#+end_src

If the =tal:attributes= statement is on an element with a =tal:repeat=
statement, the replacement is made on each repetition of the element,
and the replacement expression is evaluated fresh for each repetition.

#+begin_src scheme
  (define-TAL (sel items) #<<EOF
  <select name="examiner" id="examinerSelect">
    <option tal:repeat="(i items)" tal:attributes="(value (car i))"
            tal:content="(cdr i)">
  </select>
  EOF
  )
#+end_src

#+begin_src scheme
> (:> (sel [[1 . "President"]
            [2 . "Vice President"]
            [-1 . "Pladimir Vutin"]]))
"<select name=\"examiner\" id=\"examinerSelect\">\n  <option value=\"1\">President</option><option value=\"2\">Vice President</option><option value=\"-1\">Pladimir Vutin</option></select><option value=\"1\">President</option><option value=\"2\">Vice President</option><option value=\"-1\">Pladimir Vutin</option>
#+end_src

If you use =tal:attributes= on an element with an active =tal:replace=
command, the =tal:attributes= statement is ignored because of the
order of operations.

It can, of course, set more than one attribute.

#+begin_src scheme
  (define-TAL (att-textarea (rows 80) (cols 20)) #<<EOF
  <textarea
   rows="0" cols="0"
   tal:attributes="(rows rows) (cols cols)">
  EOF
  )  
#+end_src

#+begin_src scheme
> (:> (att-textarea))
"<textarea rows=\"80\" cols=\"20\"></textarea>"
> (:> (att-textarea 10 42))
"<textarea rows=\"10\" cols=\"42\"></textarea>"
#+end_src

** tal:condition : Conditionally insert or remove an element
:PROPERTIES:
:CUSTOM_ID: talcondition--conditionally-insert-or-remove-an-element
:END:

/Syntax/

#+begin_src bnf
  argument ::= expression
#+end_src

The =tal:condition= statement includes the statement element in the
template only if the expression evaluates to a value that's not =#f=
and omits it otherwise.

#+begin_src scheme
  (define-TAL (p-when value) #<<EOF
  <p tal:condition="value" tal:content="value"> P! </p>
  EOF
  )
#+end_src

#+begin_src scheme
> (:> (p-when "Lorum Ipsum"))
"<p>Lorum Ipsum</p>"
> (:> (p-when #f))
""
#+end_src

It can be used for alternate conditions.

#+begin_src scheme
  (define-TAL (p-if) #<<EOF
  <div tal:repeat="(item '(a s d f))">
  <p tal:condition="(repeat/item.even?)">Even</p>
  <p tal:condition="(repeat/item.odd?)">Odd</p>
  </div>
  EOF
  )
#+end_src

#+begin_src scheme
> (:> (p-if))
"<div>\n<p>Even</p>\n\n</div><div>\n\n<p>Odd</p>\n</div><div>\n<p>Even</p>\n\n</div><div>\n\n<p>Odd</p>\n</div>
#+end_src

That's a good example of why "in-tag indentation" can be important.

#+begin_src html
> (display #)
<div>
<p>Even</p>

</div><div>

<p>Odd</p>
</div><div>
<p>Even</p>

</div><div>

<p>Odd</p>
</div>
#+end_src

Outside of the =tal:condition= but inside the =tal:repeat= are those
newlines. Makes it nice to read but adds things that could mess up the
display and really are not needed.

#+begin_src scheme
  (define-TAL (p-if-in-tag) #<<EOF
  <div tal:repeat="(item '(a s d f))">
     <p tal:condition="(repeat/item.even?)">Even</p
    ><p tal:condition="(repeat/item.odd?)">Odd</p>
  </div>
  EOF
  )
#+end_src

That gives us something "nicer".

#+begin_src scheme
> (:> (p-if-in-tag))
"<div>\n   <p>Even</p>\n</div><div>\n   <p>Odd</p>\n</div><div>\n   <p>Even</p>\n</div><div>\n   <p>Odd</p>\n</div>"
#+end_src

Which kinda looks like what I'm trying to portray. 

#+begin_src html
  > (display #)
  <div>
     <p>Even</p>
  </div><div>
     <p>Odd</p>
  </div><div>
     <p>Even</p>
  </div><div>
     <p>Odd</p>
  </div>
#+end_src


** tal:content : Replace the content of an element
:PROPERTIES:
:CUSTOM_ID: talcontent--replace-the-content-of-an-element
:END:

/Syntax/

#+begin_src bnf
argument ::= (['text:'] | 'as-is:' | 'raw:') expression
#+end_src


You can insert =text:= or =as-is:= in place of its children with the
=tal:content= statement. The statement argument is exactly like that of
=tal:replace=, and is interpreted in the same fashion.

If the expression evaluates to =#f= , the statement element is left
childless. f the expression evaluates to default, then the element’s
contents are unchanged.

#+begin_src scheme
  (define-TAL (div-content cnt) #<<EOF
  <div tal:content="cnt"> Default content here</div>
  EOF
  )
#+end_src

#+begin_src scheme
> (:> (div-content default:))
"<div> Default content here</div>"
> (:> (div-content "New Content"))
"<div>New Content</div>"
> (:> (div-content #f))
"<div></div>"
#+end_src

The default replacement behavior is =text:= which replaces
angle-brackets and ampersands with their HTML entity equivalents.

#+begin_src scheme
  (define-TAL (div-text-content cnt) #<<EOF
  <div tal:content="text: cnt"> Default content here</div>
  EOF
  )
#+end_src


#+begin_src scheme
  > (let (txt "Content in a <div/>")
     [(:> (div-content txt)) (:> (div-text-content txt))])
  ("<div>Content in a &lt;div/&gt;</div>"
   "<div>Content in a &lt;div/&gt;</div>")
#+end_src

The =as-is:= keyword passes the replacement text through unchanged
allowing HTML/XML markup to be inserted. This can break your page if
the text contains unanticipated markup (e.g.. text submitted via a web
form), which is the reason that it is not the default.


#+begin_src scheme
  (define-TAL (div-html-content cnt) #<<EOF
  <div tal:content="as-is: cnt"> Default content here</div>
  EOF
  )
#+end_src

The =default:= still works.

#+begin_src scheme
> (:> (div-html-content default:))
"<div> Default content here</div>"
#+end_src

Finally the =raw:= keyword doesn't do anything with the expression
beyond run it.

#+begin_src scheme
  (define-TAL (div-raw-content cnt) #<<EOF
  <div tal:content="raw: cnt"> Default content here</div>
  EOF
  )
#+end_src
#+begin_src scheme
> (:> (div-raw-content default:))
"<div></div>"
#+end_src

Running something which outputs to =current-tal-output-port= will do
the right thing,


#+begin_src scheme
  (define-TAL (div-proc-content cnt) #<<EOF
  <div tal:content="raw: (cnt)"></div>
  EOF
  )
#+end_src

#+begin_src scheme
  > (:> (div-proc-content
         (lambda ()
  	 (div-text-content "esc: <hr>")
  	 (div-html-content "hr: <hr>"))))
  "<div><div>esc: &lt;hr&gt;</div><div>hr: <hr></div></div>"
#+end_src



** =tal:define=
:PROPERTIES:
:CUSTOM_ID: taldefine
:END:

The =tal:define= command either wraps a =with*= around the tag (by
default or with the =local:= keyword) and/or =set!='ing things with
the =set!:= keyword.


#+begin_src scheme
  (define-TAL (let-and-set x y) #<<EOF
  <div tal:define="(foo (+ x 20)) (bar (* foo y))">
    <p> Number? <b tal:content="bar"></b></p>
    <p> The Answer? <b tal:content="(if (equal? bar 42) '|Yes!| '|No|)"></b> </p>
    <p tal:define="set!: (bar 42)"> We can set as well <b> Bar = <i tal:content="bar"></i> </p>

    <p> Setting is what you expect: <br tal:replace="bar"></p>
  </div>  
  EOF
  )
#+end_src



#+begin_src scheme
> (:> (let-and-set 1 2))
"<div>\n
 <p> Number? <b>42</b></p>\n  <p> The Answer? <b>Yes!</b> </p>\n  <p> We can set as well <b> Bar = <i>42</i> </b></p>\n\n  <p> Setting is what you expect: 42</p>\n</div>  "
#+end_src
#+begin_src scheme
  > (display (html-strip #))

   Number? 42
   The Answer? Yes! 
   We can set as well  Bar = 42 

   Setting is what you expect: 42
#+end_src


#+begin_src scheme
> (:> (let-and-set 1 3))
"<div>\n  <p> Number? <b>63</b></p>\n  <p> The Answer? <b>No</b> </p>\n  <p> We can set as well <b> Bar = <i>42</i> </b></p>\n\n  <p> Setting is what you expect: 42</p>\n</div>  "
#+end_src
#+begin_src scheme
> (display (html-strip #))

   Number? 63
   The Answer? No 
   We can set as well  Bar = 42 

   Setting is what you expect: 42
  >
#+end_src

** tal:switch : Set up a switch statement
:PROPERTIES:
:CUSTOM_ID: talswitch--set-up-a-switch-statement
:END:

If everything is testing the same item, and only one can succeed, a
bunch of conditionals gets hairy. There's a =tal:switch= and some
=tal:case= statements to round it up.

#+begin_src scheme
  (define-TAL (switch-case item) #<<EOF
  <div tal:switch="item"> 
    This is why I did not use cond or if.
   <p tal:case="'foo"> We've got foo! </p>  Because where would this go? 
   <p tal:case="else:"> Else is working </p>
  </div>
  EOF
  )
    
#+end_src

#+begin_src scheme
  (define-TAL (switch-case item) #<<EOF
  <div tal:switch="item"> 
    This is why I did not use cond or if.
   <p tal:case="'foo"> We've got foo! </p> Because where would this go? 
   <p tal:case="else:"> Else is working </p>
  </div>
  EOF
  )
  > (:> (switch-case 'asd))
  "<div> \n  This is why I did not use cond or if.\n   Because where would this go? \n <p> Else is working </p>\n</div>"
  > (:> (switch-case 'foo))
  "<div> \n  This is why I did not use cond or if.\n <p> We've got foo! </p> Because where would this go? \n \n</div>"
  > 
    
#+end_src


** tal:omit-tag : Remove an element leaving its contents
:PROPERTIES:
:CUSTOM_ID: talomit-tag--remove-an-element-leaving-its-contents
:END:

/Syntax/

#+begin_src bnf 
argument ::= [ expression ]
#+end_src


The =tal:omit-tag= statement leaves the contents of an element in
place while omitting the surrounding start and end tags.

If the expression evaluates to =#f= then normal processing of the
element continues and the tags are not omitted. If the expression
evaluates to a true value, or no expression is provided, the statement
element is replaced with its contents.

#+begin_src scheme
  (define-TAL (notag) #<<EOF
  <p tal:omit-tag=""> Just The text! <a href="#"> and a link </a> </p>
  EOF
  )

  (define-TAL (maybe-tag val) #<<EOF
  <p tal:omit-tag="(not val)"> Is this a Paragraph? Who knows!</p>
  EOF
  )
#+end_src

#+begin_src scheme
> (:> (notag))
" Just The text! <a href=\"#\"> and a link </a> "
> (:> (maybe-tag #f))
" Is this a Paragraph? Who knows!"
> (:> (maybe-tag 42))
"<p> Is this a Paragraph? Who knows!</p>"
#+end_src

** current-tal:on-error and tal:on-error.
:PROPERTIES:
:CUSTOM_ID: current-talon-error-and-talon-error
:END:

Handling errors in a decent way is built into our =TAL= be
default. This is, from experience, made to make most of the page work
if there is an unwanted and unseen error.

To update the "outside" error handler outside of the =TAL= form/file
there is a =current-tal:on-error=. For "inside" use the =tal:on-error=
attribute is very useful.

*** Default and current-tal:on-error
:PROPERTIES:
:CUSTOM_ID: default-and-current-talon-error
:END:

By default the form that errors will write the error message prefixed
with =ERROR:= in place of what is most likely its contents.

#+begin_src scheme
(define-TAL (test-no-on-error thunk) #<<EOF
<ul>
  <li tal:content="(thunk)"></li>
</ul>
EOF
)
#+end_src

In running it we can see it still runs and does not mess up the page
that much.

#+begin_src scheme
> (:> (test-no-on-error (cut error "This is the error message: <escaped>")))
"<ul>\n  <li>ERROR: This is the error message: &lt;escaped&gt;</li>\n</ul>"
#+end_src

We can change it. 

#+begin_src scheme
  > (:> (parameterize ((current-tal:on-error
  		      (lambda (e) '(log-error e)
  			 (tal:write "Nothing wrong here!"))))
  	(test-no-on-error (cut error "Something Wrong!"))))
  "<ul>\n  <li>Nothing wrong here!</li>\n</ul>"
#+end_src

But in reality that abstraction's just there so pages still run with
bugs in them. Even better for all involved is the =tal:on-error=
attribute.

*** tal:on-error
:PROPERTIES:
:CUSTOM_ID: talon-error
:END:

/Syntax/

#+begin_src bnf
 argument ::= (['text:'] | 'as-is:' | 'raw:' | 'ignore:' | 'ignore') expression
#+end_src


For a more precise handling of errors the =tal:on-error=
catcher/handler makes it quite easy. When a =TAL Statement= produces
an error if there is a =tal:on-error= on the element or any parent
element the error is caught at that point and handled according to the
expression.

The first three keywords are treated the same as =tal:content= and on
error the element becomes one of those.

#+begin_src scheme
  ;; No keyword is the same as `text:`
  (define-TAL (test-got-error thunk) #<<EOF
  <ul tal:on-error="'|Got an Error!|">
    <li tal:content="(thunk)"></li>
  </ul>
  EOF
  )

#+end_src

The result differs from the default catcher.

#+begin_src scheme
  > (:> (test-got-error (lambda () "Nice! No error")))
  "<ul>\n  <li>Nice! No error</li>\n</ul>"
  > (:> (test-got-error (cut error "error here")))
  "<ul>Got an Error!</ul>"
#+end_src

Because we catch it on the =<ul/>= the handler does not give us the
=<li/>= wrapper and it breaks the valid HTML! We did that on purpose,
of course, and that's the idea behind a much more specific catcher.


#+begin_src scheme
  (define-TAL (test-got-li-error thunk) #<<EOF
  <ul tal:on-error="as-is: '|<li> Got an Error! </li>|">
    <li tal:content="(thunk)"></li>
  </ul>
  EOF
  )
#+end_src

That allows us to be much more clinical. 

#+begin_src scheme
> (:> (test-got-li-error (cut error "error here")))
"<ul><li> Got an Error! </li></ul>"
#+end_src

But these are errors and though informing the is always a good idea
perhaps we also want to handle it outside of the tal forms.

For that reason the =err= identifier is bound to the exception object
within the =tal:on-error= statement.

#+begin_src scheme
  (define-TAL (error-li) "<li> Got an Error! </li>")
  (def err-log [])
  (def (log-err err) (set! err-log (cons err err-log)))
  (def (handle-ul-error err) (log-err err) (error-li))
#+end_src

#+begin_src scheme
  (define-TAL (test-handle-ul-error thunk) #<<EOF
  <ul tal:on-error="raw: (handle-ul-error err)">
    <li tal:content="(thunk)"></li>
  </ul>
  EOF
  )
#+end_src

#+begin_src scheme
> (length err-log)
0
> (:> (test-handle-ul-error (cut error "asd")))
"<ul><li> Got an Error! </li></ul>"
> (length err-log)
1
#+end_src

But that may raise the question of: why we need an unordered list that
is an error?

That that there's the =ignore= and =ignore:= arguments.


#+begin_src scheme
  (define-TAL (test-ignore-error thunk) #<<EOF
  <ul tal:on-error="ignore">
    <li tal:content="(thunk)"></li>
  </ul>
  EOF
  )
#+end_src

Now there's no =<ul/>= tag if it errors!

#+begin_src scheme
> (:> (test-ignore-error (lambda () "LI here!")))
"<ul>\n  <li>LI here!</li>\n</ul>"
> (:> (test-ignore-error (cut error "No UL here!")))
""
#+end_src

Or, like, if we actually want something that's not an unordered list,
we can do that as well.


#+begin_src scheme
  (define-TAL (error-div err) #<<EOF
  <div tal:content="(log-err err) '|Error Here!|"></div>
  EOF
  )

  (define-TAL (test-ignore-div-error thunk) #<<EOF
  <ul tal:on-error="ignore: (error-div err)">
    <li tal:content="(thunk)"></li>
  </ul>
  EOF
  )
#+end_src

#+begin_src scheme
> (length err-log)
1
> (:> (test-ignore-div-error (lambda () "No Error")))
"<ul>\n  <li>No Error</li>\n</ul>"
> (length err-log)
1
> (:> (test-ignore-div-error (cut error "Got div")))
"<div>Error Here!</div>"
> (length err-log)
2
#+end_src


** tal:repeat : Repeat an element
:PROPERTIES:
:CUSTOM_ID: talrepeat--repeat-an-element
:END:

/Syntax/

#+begin_src bnf
argument      ::= '(' variable-name expression ')'
variable-name ::= Identifier
#+end_src

The =tal:repeat= statement replicates a sub-tree of your document once
for each item in a sequence. The expression should evaluate to
anything acceptable for =:std/iter= to repeat.

#+begin_src scheme
  (define-TAL (test-b-repeat thing) #<<EOF
  <b tal:repeat="(i thing)" tal:content="i"></b>
  EOF
  )
#+end_src

#+begin_src scheme
> (:> (test-b-repeat '(1 2 3)))
"<b>1</b><b>2</b><b>3</b>"
> (:> (test-b-repeat "asd"))
"<b>a</b><b>s</b><b>d</b>"
> (:> (test-b-repeat #(v e c)))
"<b>v</b><b>e</b><b>c</b>"
#+end_src


If the iterator is empty then the statement element is deleted,
otherwise it is repeated for each value sequentially.

#+begin_src scheme
> (:> (test-b-repeat '()))
""
> (:> (test-b-repeat ""))
""
#+end_src

The =variable-name= is used to define a local variable and a
=repeat/variable-name= for a  =Repeat= interface variable. For each
repetition, the local variable is set to the current sequence element,
and the repeat variable is set to an interface around the iteration
object.

*** The Repeat Interface
:PROPERTIES:
:CUSTOM_ID: the-repeat-interface
:END:

You use the =Repeat= interface to access information about the current
repetition (such as the repeat index). The repeat interface has the
same name as the local variable prefixed with =repeat/= and has the
following methods.

    - index :: repetition number, starting from zero.

    - number :: repetition number, starting from one.

    - even? :: true for even-indexed repetitions (0, 2, 4, …).

    - odd? ::  true for odd-indexed repetitions (1, 3, 5, …).

    - start? :: true for the starting repetition (index 0).

    - end? :: true for the ending, or final, repetition.

    - letter ::  repetition number as a lower-case letter: “a” - “z”,
      “aa” - “az”, “ba” - “bz”, …, “za” - “zz”, “aaa” - “aaz”, and so
      forth.

    - Letter :: upper-case version of =letter=.

    - roman :: repetition number as a lower-case roman numeral: “i”,
      “ii”, “iii”, “iv”, “v”, etc.

    - Roman :: upper-case version of =roman=.


Iterating over a sequence:

#+begin_src scheme
  (define-TAL (rep seq) #<<EOF
  <p tal:repeat="(i seq)">
    <span tal:replace="i"/>
  </p>
  EOF
  )
#+end_src

#+begin_src scheme
> (:> (rep '(foo bar baz)))
"<p>\n  foo\n</p><p>\n  bar\n</p><p>\n  baz\n</p>"
#+end_src

Inserting a sequence of table rows, and using the repeat variable to number the rows:

#+begin_src scheme
  (def desc car)
  (def price cdr)

  (define-TAL (checkout-table cart) #<<EOF
  <table>
    <tr tal:repeat="(item cart)">
      <th tal:content="(repeat/item.number)">1</th>
      <td tal:content="(desc item)">Widget</td>
      <td tal:content="(price item)">$1.50</td>
    </tr>
  </table>
  EOF
  )
#+end_src

#+begin_src scheme
> (:> (checkout-table '(("Soilent Green" . "$People") ("Napkins" . "$42.00"))))
"<table>\n  <tr>\n    <th>1</th>\n    <td>Soilent Green</td>\n    <td>$People</td>\n  </tr><tr>\n    <th>2</th>\n    <td>Napkins</td>\n    <td>$42.00</td>\n  </tr>\n</table>"
#+end_src

That's better to see displayed.

#+begin_src scheme
> (display #)
<table>
  <tr>
    <th>1</th>
    <td>Soilent Green</td>
    <td>$People</td>
  </tr><tr>
    <th>2</th>
    <td>Napkins</td>
    <td>$42.00</td>
  </tr>
</table>
#+end_src

Nested repeats:


#+begin_src scheme
  (define-TAL (nested-repeats rows cols) #<<EOF
  <table border="1">
    <tr tal:repeat="(row rows)">
      <td tal:repeat="(column cols)">
        <span tal:define="(x (repeat/row.number))
                          (y (repeat/column.number));
                          (z (* x y))"
              tal:replace="(fmt '|~a * ~a = ~a| x y z)" >
            1 * 1 = 1
        </span>
      </td>
    </tr>
  </table>
  EOF
  )
#+end_src


#+begin_src scheme
  > (:> (nested-repeats '(1 2 3) #(4 6 5)))
"<table border=\"1\">\n  <tr>\n    <td>\n      1 * 1 = 1\n    </td><td>\n      1 * 2 = 2\n    </td><td>\n      1 * 3 = 3\n    </td>\n  </tr><tr>\n    <td>\n      2 * 1 = 2\n    </td><td>\n      2 * 2 = 4\n    </td><td>\n      2 * 3 = 6\n    </td>\n  </tr><tr>\n    <td>\n      3 * 1 = 3\n    </td><td>\n      3 * 2 = 6\n    </td><td>\n      3 * 3 = 9\n    </td>\n  </tr>\n</table>"
#+end_src

That's also nice to see in long form.
#+begin_src scheme
> (display #)
<table border="1">
  <tr>
    <td>
      1 * 1 = 1
    </td><td>
      1 * 2 = 2
    </td><td>
      1 * 3 = 3
    </td>
  </tr><tr>
    <td>
      2 * 1 = 2
    </td><td>
      2 * 2 = 4
    </td><td>
      2 * 3 = 6
    </td>
  </tr><tr>
    <td>
      3 * 1 = 3
    </td><td>
      3 * 2 = 6
    </td><td>
      3 * 3 = 9
    </td>
  </tr>
</table> 
#+end_src


